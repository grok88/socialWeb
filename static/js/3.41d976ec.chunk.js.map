{"version":3,"sources":["components/profile/profile.module.css","components/profile/profileInfo/profileInfo.module.css","components/profile/my-posts/myPosts.module.css","components/profile/my-posts/post/post.module.css","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","components/profile/profileInfo/profilestatus/ProfileStatus.tsx","components/profile/profileInfo/ProfileDataForm/ProfileDataForm.tsx","components/profile/profileInfo/profileInfo.tsx","components/profile/my-posts/post/post.tsx","components/profile/my-posts/myPosts.tsx","components/profile/my-posts/myPostsContainer.ts","components/profile/profile.tsx","components/profile/profileContainer.tsx"],"names":["module","exports","_slicedToArray","arr","i","Array","isArray","Symbol","iterator","Object","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","value","length","err","unsupportedIterableToArray","TypeError","ProfileStatus","state","editMode","status","props","activateEditMode","setState","deactivateEditMode","updateUserStatus","onChangeStatus","e","currentTarget","prevProps","prevState","snapshot","this","className","styles","profileStatusBlock","type","autoFocus","onBlur","onChange","onDoubleClick","React","Component","ProfileDataFormRedux","reduxForm","form","onSubmit","handleSubmit","error","commonErrorField","Field","name","placeholder","component","Input","Textarea","keys","profile","contacts","map","key","ProfileInfo","saveProfile","useState","setEditMode","style","profileInfo","src","alt","description","photos","small","userPhoto","width","isOwner","target","files","onUploadImg","formData","then","initialValues","goToEditMode","Preloader","ProfileData","onClick","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","contactTitle","contactValue","Contact","contact","Post","message","likeCount","item","maxLength30","maxLengthCreator","MyPosts","memo","profilePage","addPost","postsBlock","AddPostMessageFormRedux","newMessageBody","posts","id","validate","required","MyPostsContainer","connect","dispatch","addPostAC","Profile","content","ProfileContainer","userId","match","params","logginedUserId","String","history","getUserProfile","getUserStatus","refreshProfile","savePhoto","compose","auth","withRouter","withAuthRedirect"],"mappings":"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","file":"static/js/3.41d976ec.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"profile_content__3R0x5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"description\":\"profileInfo_description__N-3QO\",\"contact\":\"profileInfo_contact__tF106\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"myPosts_postsBlock__3b2mG\",\"posts\":\"myPosts_posts__3l4I5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"post_item__XC1dh\"};","import arrayWithHoles from \"./arrayWithHoles\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nimport nonIterableRest from \"./nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import React, {ChangeEvent} from 'react';\r\nimport styles from './ProfileStatus.module.css';\r\n\r\ntype PropsType = {\r\n    status: string;\r\n    updateUserStatus: (status: string) => void;\r\n}\r\ntype StateType = {\r\n    editMode: boolean;\r\n    status: string;\r\n}\r\nexport class ProfileStatus extends React.Component<PropsType,StateType> {\r\n    state = {\r\n        editMode: false,\r\n        status: this.props.status\r\n    }\r\n\r\n    activateEditMode = () => {\r\n        this.setState({\r\n            editMode: true\r\n        });\r\n    }\r\n    deactivateEditMode = () => {\r\n        this.setState({\r\n            editMode: false\r\n        });\r\n        this.props.updateUserStatus(this.state.status);\r\n    }\r\n\r\n    onChangeStatus = (e: ChangeEvent<HTMLInputElement>) => {\r\n        this.setState({\r\n            status: e.currentTarget.value\r\n        });\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<PropsType>, prevState: Readonly<StateType>, snapshot?: any) {\r\n        if (prevProps.status !== this.props.status) {\r\n            this.setState({\r\n                status: this.props.status\r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={styles.profileStatusBlock}>\r\n                {this.state.editMode\r\n                && <input type={'text'}\r\n\t\t\t\t\t\t  value={this.state.status}\r\n\t\t\t\t\t\t  autoFocus={true}\r\n\t\t\t\t\t\t  onBlur={this.deactivateEditMode}\r\n\t\t\t\t\t\t  onChange={this.onChangeStatus}\r\n\t\t\t\t/>}\r\n\r\n                {!this.state.editMode && <div>\r\n\t\t\t\t\t<b>status</b>:<span onDoubleClick={this.activateEditMode}>{this.props.status || 'No status'}</span>\r\n\t\t\t\t</div>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}","import React from \"react\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Input, Textarea} from \"../../../common/formsControls/FormsControls\";\r\nimport {ProfileType} from \"../profileInfo\";\r\nimport styles from \"../../../common/formsControls/FormsControls.module.css\";\r\n\r\n\r\n//Profile FORM\r\nexport type ProfileDataFormType = {\r\n    aboutMe: string;\r\n    fullName: string;\r\n    lookingForAJobDescription: string;\r\n}\r\ntype PropsType = {\r\n    profile:ProfileType;\r\n}\r\n\r\nconst ProfileDataForm: React.FC<PropsType & InjectedFormProps<ProfileDataFormType,PropsType >> = (props) => {\r\n\r\n    return <form onSubmit={props.handleSubmit}>\r\n\r\n        {props.error && <div className={styles.commonErrorField}>\r\n            {props.error}\r\n\t\t</div>}\r\n        <div>\r\n            <b>Full name </b>: <Field name={'fullName'} placeholder={'Full name '} component={Input}/>\r\n        </div>\r\n        <div>\r\n            <b>Looking for a job </b>: <Field name={'checkbox'} placeholder={''} type={'checkbox'} component={Input}/>\r\n        </div>\r\n\r\n        <div>\r\n            <b>Looking for a job description </b>: <Field name={'lookingForAJobDescription'}\r\n                                                          placeholder={'Looking for a job description '}\r\n                                                          component={Textarea}/>\r\n        </div>\r\n\r\n        <div>\r\n            <b>About me</b>: <Field name={'aboutMe'}\r\n                                    placeholder={'About me'}\r\n                                    component={Textarea}/>\r\n        </div>\r\n        <div>\r\n            <b>Contacts </b>: {Object.keys(props.profile.contacts).map(key => <div key={key}>\r\n            <b>{key}</b>:\r\n            <Field name={'contacts.' + key} placeholder={key} component={Input} />\r\n        </div>)}\r\n        </div>\r\n        <div>\r\n            <button >save</button>\r\n        </div>\r\n    </form>\r\n}\r\nconst ProfileDataFormRedux = reduxForm< ProfileDataFormType, PropsType>({form: 'edit-profile'})(ProfileDataForm);\r\n\r\nexport default ProfileDataFormRedux;","import React, {ChangeEvent, useState} from 'react';\r\nimport style from './profileInfo.module.css';\r\nimport Preloader from \"../../../assets/preloader/Preloader\";\r\nimport userPhoto from '../../../assets/images/green.png'\r\nimport {ProfileStatus} from './profilestatus/ProfileStatus';\r\nimport ProfileDataFormRedux, {ProfileDataFormType} from \"./ProfileDataForm/ProfileDataForm\";\r\n\r\nexport type ProfileType = {\r\n    aboutMe: string,\r\n    contacts: {\r\n        [key: string]: string\r\n    },\r\n    lookingForAJob: boolean,\r\n    lookingForAJobDescription: string,\r\n    fullName: string,\r\n    userId: number,\r\n    photos: {\r\n        small: string,\r\n        large: string\r\n    }\r\n}\r\n\r\nexport type ProfileInfoPropsType = {\r\n    profile: ProfileType,\r\n    status: string;\r\n    updateUserStatus: (status: string) => void;\r\n    isOwner: boolean\r\n    onUploadImg: (file: any) => void;\r\n    saveProfile: (profile: ProfileDataFormType) => any;\r\n}\r\n\r\nconst ProfileInfo = (props: ProfileInfoPropsType) => {\r\n    const {profile, saveProfile} = props;\r\n\r\n    const [editMode, setEditMode] = useState<boolean>(false);\r\n\r\n    const onUploadImg = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files && e.target.files[0]) {\r\n            props.onUploadImg(e.target.files[0]);\r\n        }\r\n    }\r\n    const onSubmit = (formData: ProfileDataFormType) => {\r\n        saveProfile(formData)\r\n            .then(() => {\r\n                setEditMode(false);\r\n            });\r\n\r\n    }\r\n\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n    return (\r\n        <div className={style.profileInfo}>\r\n            <div>\r\n                <img\r\n                    src=\"https://p.bigstockphoto.com/GeFvQkBbSLaMdpKXF1Zv_bigstock-Aerial-View-Of-Blue-Lakes-And--227291596.jpg\"\r\n                    alt=\"main-fon\"/>\r\n            </div>\r\n\r\n            <div className={style.description}>\r\n                <div>\r\n                    <img src={profile.photos.small !== null ? profile.photos.small : userPhoto} alt=\"user avator\"\r\n                         width={100}/>\r\n                </div>\r\n                {\r\n                    props.isOwner &&\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t<input type=\"file\" onChange={onUploadImg}/>\r\n\t\t\t\t\t</div>\r\n                }\r\n                <ProfileStatus status={props.status} updateUserStatus={props.updateUserStatus}/>\r\n                {\r\n                    editMode ? <ProfileDataFormRedux onSubmit={onSubmit} initialValues={profile} profile={profile}/> :\r\n                        <ProfileData profile={profile} isOwner={props.isOwner} goToEditMode={() => setEditMode(true)}/>\r\n                }\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ProfileInfo;\r\n\r\n\r\n//Profile Data\r\ntype ProfileDataPropsType = {\r\n    profile: ProfileType;\r\n    isOwner: boolean;\r\n    goToEditMode: () => void;\r\n}\r\n\r\nexport const ProfileData: React.FC<ProfileDataPropsType> = ({profile, isOwner, goToEditMode}) => {\r\n    return <div>\r\n        {isOwner &&\r\n\t\t<div>\r\n\t\t\t<button onClick={goToEditMode}>Edit profile</button>\r\n\t\t</div>\r\n        }\r\n        <div>\r\n            <b>Full name </b>: {profile.fullName}\r\n        </div>\r\n        <div>\r\n            <b>Looking for a job </b>: {profile.lookingForAJob ? 'yes' : 'no'}\r\n        </div>\r\n        {\r\n            profile.lookingForAJob &&\r\n\t\t\t<div>\r\n\t\t\t\t<b>Looking for a job description </b>: {profile.lookingForAJobDescription}\r\n\t\t\t</div>\r\n        }\r\n        <div>\r\n            <b>About me </b>: {profile.aboutMe}\r\n        </div>\r\n        <div>\r\n            <b>Contacts </b>: {Object.keys(profile.contacts).map(key => <Contact contactTitle={key}\r\n                                                                                 contactValue={profile.contacts[key]}\r\n                                                                                 key={key}/>)}\r\n        </div>\r\n\r\n    </div>\r\n}\r\n\r\n//Contact\r\ntype ContactPropsType = {\r\n    contactTitle: string;\r\n    contactValue: string;\r\n}\r\n\r\nexport const Contact: React.FC<ContactPropsType> = (props) => {\r\n    const {contactTitle, contactValue} = props;\r\n    return <div className={style.contact}>\r\n        <b>{contactTitle}</b>: {contactValue}\r\n    </div>\r\n}","import React from 'react';\r\nimport style from './post.module.css';\r\n\r\ntype propsType = {\r\n    message : string,\r\n    likeCount : string\r\n}\r\n\r\nconst Post = (props : propsType) => {\r\n    const {message, likeCount} = props;\r\n\r\n    return (\r\n        <div className={style.item}>\r\n            <img\r\n                src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcTmHvlQey7sRB-lIKvwZQHlY-Gwi0TIDWloz6LZcCYwdubZ5-nV&usqp=CAU\"\r\n                alt=\"user\"/>\r\n            {message}\r\n            <span>{likeCount} - like</span>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Post;","import React from 'react';\r\nimport style from './myPosts.module.css';\r\nimport Post from \"./post/post\";\r\nimport {ProfileType} from \"../profileInfo/profileInfo\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport {Textarea} from '../../common/formsControls/FormsControls';\r\nimport {ObjPostType} from \"../../../types/types\";\r\n\r\ntype PropsType = {\r\n    profilePage: {\r\n        posts: Array<ObjPostType>;\r\n        profile: ProfileType | null;\r\n    };\r\n    addPost: (value: string) => void;\r\n}\r\n\r\nconst maxLength30 = maxLengthCreator(30);\r\n\r\nconst MyPosts = React.memo((props: PropsType) => {\r\n    const {profilePage, addPost} = props;\r\n\r\n    const onSubmit = (formData: FormDataType) => {\r\n        addPost(formData.newMessageBody)\r\n    }\r\n\r\n    return (\r\n        <div className={style.postsBlock}>\r\n            My Posts\r\n            <div>\r\n                <AddPostMessageFormRedux onSubmit={onSubmit}/>\r\n            </div>\r\n            <div className={style.posts}>\r\n                {\r\n                    profilePage.posts.map(({id, message, likeCount}) => <Post message={message}\r\n                                                                              likeCount={likeCount}\r\n                                                                              key={id}/>)\r\n                }\r\n            </div>\r\n        </div>\r\n    );\r\n});\r\n\r\ntype FormDataType = {\r\n    newMessageBody: string\r\n}\r\n\r\nexport const AddPostMessageForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\r\n\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field name='newMessageBody' placeholder='Enter you Post message' component={Textarea}\r\n                       validate={[required, maxLength30]}/>\r\n            </div>\r\n            <div>\r\n                <button>Send</button>\r\n            </div>\r\n        </form>\r\n    );\r\n}\r\n\r\nconst AddPostMessageFormRedux = reduxForm<FormDataType>({form: 'addPostMessageForm'})(AddPostMessageForm);\r\n\r\nexport default MyPosts;","import {addPostAC, ProfileReducerInitialStateType} from \"../../../redux/profile-reducer\";\r\nimport MyPosts from \"./myPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppRootState} from \"../../../redux/redux-store\";\r\nimport {Dispatch} from \"redux\";\r\n\r\ntype ObjType = {\r\n    id: string,\r\n    message: string,\r\n    likeCount: string\r\n}\r\n\r\ntype MapStateToPropsType = {\r\n    profilePage: ProfileReducerInitialStateType\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    addPost: (value:string) => void;\r\n}\r\n\r\n\r\n\r\nlet mapStateToProps = (state: AppRootState): MapStateToPropsType => {\r\n    return {\r\n        profilePage: state.profilePage\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType => {\r\n    return {\r\n        addPost: (value:string) => {\r\n            dispatch(addPostAC(value));\r\n        }\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect<MapStateToPropsType, MapDispatchToPropsType, {}, AppRootState>(mapStateToProps, mapDispatchToProps)(MyPosts);\r\n\r\nexport default MyPostsContainer;","import React from 'react';\r\nimport style from './profile.module.css';\r\nimport ProfileInfo from \"./profileInfo/profileInfo\";\r\nimport MyPostsContainer from \"./my-posts/myPostsContainer\";\r\nimport {ProfileDataFormType} from \"./profileInfo/ProfileDataForm/ProfileDataForm\";\r\n\r\ntype propsType = {\r\n    getUserProfile: (userId: string) => void,\r\n    profile: any;\r\n    status: string;\r\n    updateUserStatus: (status: string) => void;\r\n    isOwner: boolean\r\n    onUploadImg: (file: any) => void;\r\n    saveProfile: (profile: ProfileDataFormType) => void;\r\n}\r\n\r\n// FC<ProfileContainerProps>\r\nconst Profile = (props: propsType) => {\r\n    return (\r\n        <section className={style.content}>\r\n            <ProfileInfo profile={props.profile} status={props.status} updateUserStatus={props.updateUserStatus}\r\n                         isOwner={props.isOwner} onUploadImg={props.onUploadImg} saveProfile={props.saveProfile}/>\r\n            <MyPostsContainer/>\r\n        </section>\r\n    );\r\n}\r\n\r\nexport default Profile;","import React from \"react\";\r\nimport Profile from \"./profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {getUserProfile, getUserStatus, savePhoto, saveProfile, updateUserStatus} from \"../../redux/profile-reducer\";\r\nimport {AppRootState} from \"../../redux/redux-store\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport { ProfileType} from \"./profileInfo/profileInfo\";\r\nimport {compose} from \"redux\";\r\nimport {ProfileDataFormType} from \"./profileInfo/ProfileDataForm/ProfileDataForm\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\n\r\ntype PathParamsType = {\r\n    userId: string;\r\n}\r\ntype MapStatePropsType = {\r\n    profile: ProfileType | null;\r\n    status: string;\r\n    logginedUserId: number | null;\r\n}\r\ntype MapDispatchToProps = {\r\n    getUserProfile: (userId: string) => void;\r\n    getUserStatus: (userId: string) => void;\r\n    updateUserStatus: (status: string) => void;\r\n    savePhoto: (file: any) => void;\r\n    saveProfile: (profile: ProfileDataFormType) => void;\r\n}\r\ntype OwnPropsType = MapStatePropsType & MapDispatchToProps;\r\ntype PropsType = RouteComponentProps<PathParamsType> & OwnPropsType;\r\n\r\n\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n\r\n    refreshProfile() {\r\n        let userId = this.props.match.params.userId;\r\n        if (!userId) {\r\n            if (this.props.logginedUserId) {\r\n                userId = String(this.props.logginedUserId);\r\n            }\r\n            if (!userId) {\r\n                this.props.history.push(\"/login\");\r\n            }\r\n        }\r\n        this.props.getUserProfile(userId);\r\n        this.props.getUserStatus(userId);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile();\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<PropsType>, prevState: Readonly<{}>, snapshot?: any) {\r\n        if (this.props.match.params.userId !== prevProps.match.params.userId) {\r\n            this.refreshProfile();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Profile  {...this.props} profile={this.props.profile} status={this.props.status}\r\n                      isOwner={!this.props.match.params.userId}\r\n                      updateUserStatus={this.props.updateUserStatus}\r\n                      onUploadImg={this.props.savePhoto}\r\n                      saveProfile={this.props.saveProfile}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppRootState): MapStatePropsType => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    logginedUserId: state.auth.id\r\n});\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect<MapStatePropsType, MapDispatchToProps, {}, AppRootState>(mapStateToProps, {\r\n        getUserProfile,\r\n        getUserStatus,\r\n        updateUserStatus,\r\n        savePhoto,\r\n        saveProfile\r\n    }),\r\n    withRouter,\r\n    withAuthRedirect\r\n)(ProfileContainer);\r\n\r\n// let AuthRedirectComponent = withAuthRedirect(ProfileContainer);\r\n//\r\n//\r\n//\r\n// let WithUrlDataContainerComponent = withRouter(AuthRedirectComponent);\r\n//\r\n// export default connect<MapStatePropsType, MapDispatchToProps, {}, AppRootState>(mapStateToProps, {getUserProfile})(WithUrlDataContainerComponent);\r\n"],"sourceRoot":""}