{"version":3,"sources":["hoc/withAuthRedirect.tsx","components/profile/profileInfo/profileInfo.module.css","components/profile/profileInfo/profilestatus/ProfileStatus.module.css","components/profile/my-posts/myPosts.module.css","components/profile/my-posts/post/post.module.css","components/profile/profileInfo/profilestatus/ProfileStatus.tsx","components/profile/profileInfo/ProfileDataForm/ProfileDataForm.tsx","components/profile/profileInfo/profileInfo.tsx","components/profile/my-posts/post/post.tsx","components/profile/my-posts/myPosts.tsx","components/profile/my-posts/myPostsContainer.ts","components/profile/profile.tsx","components/profile/profileContainer.tsx"],"names":["mapStateForRedirect","state","isAuth","auth","withAuthRedirect","Component","RedirectComponent","this","props","to","React","connect","module","exports","ProfileStatus","editMode","status","activateEditMode","setState","deactivateEditMode","updateUserStatus","onChangeStatus","e","currentTarget","value","prevProps","prevState","snapshot","className","styles","profileStatusBlock","type","autoFocus","onBlur","onChange","onDoubleClick","ProfileDataFormRedux","reduxForm","form","onSubmit","handleSubmit","error","commonErrorField","Field","name","placeholder","component","Input","Textarea","Object","keys","profile","contacts","map","key","ProfileInfo","saveProfile","useState","setEditMode","span","style","profileInfo","gutter","md","lg","panel","panelDefault","panelHeading","panelTitle","panelBody","src","photos","large","userPhoto","alt","fullName","panelBtn","isOwner","target","files","onUploadImg","formData","then","initialValues","goToEditMode","Preloader","ProfileData","lookingForAJob","lookingForAJobDescription","aboutMe","contactTitle","contactValue","onClick","Contact","contact","Post","message","likeCount","item","maxLength30","maxLengthCreator","MyPosts","memo","profilePage","addPost","postsBlock","AddPostMessageFormRedux","newMessageBody","posts","id","validate","required","MyPostsContainer","dispatch","actions","addPostAC","Profile","content","ProfileContainer","userId","match","params","logginedUserId","String","history","push","getUserProfile","getUserStatus","refreshProfile","savePhoto","compose","withRouter"],"mappings":"0NAQMA,EAAsB,SAACC,GAAD,MAAwD,CAChFC,OAAQD,EAAME,KAAKD,SAGVE,EAAmB,SAACC,GAAoB,IAE3CC,EAF0C,uKAIxC,OAAKC,KAAKC,MAAMN,OAGT,kBAACG,EAAcE,KAAKC,OAFhB,kBAAC,IAAD,CAAUC,GAAI,eALe,GAEhBC,IAAML,WAUtC,OADiCM,YAA4DX,EAAoB,GAAhFW,CAAoFL,K,0CCtBzHM,EAAOC,QAAU,CAAC,YAAc,iCAAiC,MAAQ,2BAA2B,aAAe,kCAAkC,aAAe,kCAAkC,WAAa,gCAAgC,UAAY,iC,oBCA/PD,EAAOC,QAAU,CAAC,mBAAqB,4C,oBCAvCD,EAAOC,QAAU,CAAC,WAAa,8B,oBCA/BD,EAAOC,QAAU,CAAC,KAAO,qB,yLCUZC,EAAb,4MACIb,MAAQ,CACJc,UAAU,EACVC,OAAQ,EAAKR,MAAMQ,QAH3B,EAMIC,iBAAmB,WACf,EAAKC,SAAS,CACVH,UAAU,KARtB,EAWII,mBAAqB,WACjB,EAAKD,SAAS,CACVH,UAAU,IAEd,EAAKP,MAAMY,iBAAiB,EAAKnB,MAAMe,SAf/C,EAkBIK,eAAiB,SAACC,GACd,EAAKJ,SAAS,CACVF,OAAQM,EAAEC,cAAcC,SApBpC,iEAwBuBC,EAAgCC,EAAgCC,GAC3EF,EAAUT,SAAWT,KAAKC,MAAMQ,QAChCT,KAAKW,SAAS,CACVF,OAAQT,KAAKC,MAAMQ,WA3BnC,+BAiCQ,OACI,yBAAKY,UAAWC,IAAOC,oBAClBvB,KAAKN,MAAMc,UACT,2BAAOgB,KAAM,OACxBP,MAAOjB,KAAKN,MAAMe,OAClBgB,WAAW,EACXC,OAAQ1B,KAAKY,mBACbe,SAAU3B,KAAKc,kBAGLd,KAAKN,MAAMc,UAAY,6BACpC,qCADoC,IACtB,0BAAMoB,cAAe5B,KAAKU,kBAAmBV,KAAKC,MAAMQ,QAAU,mBA5CrF,GAAmCN,IAAML,W,4CC6C1B+B,EAFcC,YAA0C,CAACC,KAAM,gBAAjDD,EArCoE,SAAC7B,GAE9F,OAAO,0BAAM+B,SAAU/B,EAAMgC,cAExBhC,EAAMiC,OAAS,yBAAKb,UAAWC,IAAOa,kBAClClC,EAAMiC,OAEX,6BACI,yCADJ,KACuB,kBAACE,EAAA,EAAD,CAAOC,KAAM,WAAYC,YAAa,aAAcC,UAAWC,OAEtF,6BACI,iDADJ,KAC+B,kBAACJ,EAAA,EAAD,CAAOC,KAAM,WAAYC,YAAa,GAAId,KAAM,WAAYe,UAAWC,OAGtG,6BACI,6DADJ,KAC2C,kBAACJ,EAAA,EAAD,CAAOC,KAAM,4BACNC,YAAa,iCACbC,UAAWE,OAG7D,6BACI,uCADJ,KACqB,kBAACL,EAAA,EAAD,CAAOC,KAAM,UACNC,YAAa,WACbC,UAAWE,OAEvC,6BACI,wCADJ,KACuBC,OAAOC,KAAK1C,EAAM2C,QAAQC,UAAUC,KAAI,SAAAC,GAAG,OAAI,yBAAKA,IAAKA,GAC5E,2BAAIA,GAD8D,IAElE,kBAACX,EAAA,EAAD,CAAOC,KAAM,YAAcU,EAAKT,YAAaS,EAAKR,UAAWC,WAGjE,6BAEI,6C,yBCyDGQ,EA3EK,SAAC/C,GAAiC,IAC3C2C,EAAwB3C,EAAxB2C,QAASK,EAAehD,EAAfgD,YADiC,EAGjBC,oBAAkB,GAHD,mBAG1C1C,EAH0C,KAGhC2C,EAHgC,KAgBjD,OAAKP,EAID,kBAAC,IAAD,CAAKQ,KAAM,GAAI/B,UAAWgC,IAAMC,aAC5B,kBAAC,IAAD,CAAKC,OAAQ,GACT,kBAAC,IAAD,CACIC,GAAI,CAACJ,KAAM,IACXK,GAAI,CAACL,KAAM,IAEX,yBAAK/B,UAAS,UAAKgC,IAAMK,MAAX,YAAoBL,IAAMM,eACpC,yBAAKtC,UAAS,UAAKgC,IAAMO,eACrB,4BAAQvC,UAAS,UAAKgC,IAAMQ,aACxB,6IAGR,yBAAKxC,UAAS,UAAKgC,IAAMS,YACrB,kBAAC,IAAD,CAEIC,IAA8B,OAAzBnB,EAAQoB,OAAOC,MAAiBrB,EAAQoB,OAAOC,MAAQC,IAC5DC,IAAI,gBAER,4BAAKvB,EAAQwB,UACb,kBAAC,EAAD,CAAe3D,OAAQR,EAAMQ,OAAQI,iBAAkBZ,EAAMY,sBAIzE,kBAAC,IAAD,CACI2C,GAAI,CAACJ,KAAM,IACXK,GAAI,CAACL,KAAM,KAEX,yBAAK/B,UAAS,UAAKgC,IAAMK,QACrB,yBAAKrC,UAAS,UAAKgC,IAAMS,YACrB,yBAAKzC,UAAS,UAAKgC,IAAMgB,WAEjBpE,EAAMqE,SACN,6BACI,8LACA,2BAAO9C,KAAK,OAAOG,SAjDnC,SAACZ,GACbA,EAAEwD,OAAOC,OAASzD,EAAEwD,OAAOC,MAAM,IACjCvE,EAAMwE,YAAY1D,EAAEwD,OAAOC,MAAM,QAkDb,8BAGAhE,EACI,kBAAC,EAAD,CAAsBwB,SAnDrC,SAAC0C,GACdzB,EAAYyB,GACPC,MAAK,WACFxB,GAAY,OAgDkDyB,cAAehC,EACnCA,QAASA,IAC/B,kBAAC,EAAD,CAAaA,QAASA,EAAS0B,QAASrE,EAAMqE,QACjCO,aAAc,kBAAM1B,GAAY,WA/ClE,kBAAC2B,EAAA,EAAD,OAoEFC,EAA8C,SAAC,GAAsC,IAArCnC,EAAoC,EAApCA,QAAS0B,EAA2B,EAA3BA,QAASO,EAAkB,EAAlBA,aAC3E,OAAO,6BACH,mJACA,6BACI,iDADJ,KACgCjC,EAAQoC,eAAiB,MAAQ,MAG7DpC,EAAQoC,gBACR,6BACI,6DADJ,KAC4CpC,EAAQqC,2BAGxD,6BACI,wCADJ,KACuBrC,EAAQsC,SAE/B,6BACI,wCADJ,KACuBxC,OAAOC,KAAKC,EAAQC,UAAUC,KAAI,SAAAC,GAAG,OAAI,kBAAC,EAAD,CAASoC,aAAcpC,EACdqC,aAAcxC,EAAQC,SAASE,GAC/BA,IAAKA,QAE7EuB,GACD,6BACI,4BAAQe,QAASR,GAAjB,mBAYCS,EAAsC,SAACrF,GAAW,IACpDkF,EAA8BlF,EAA9BkF,aAAcC,EAAgBnF,EAAhBmF,aACrB,OAAO,yBAAK/D,UAAWgC,IAAMkC,SACzB,2BAAIJ,GADD,KACqBC,GAA8B,qL,6CCpI/CI,EAdF,SAACvF,GAAuB,IAC1BwF,EAAsBxF,EAAtBwF,QAASC,EAAazF,EAAbyF,UAEhB,OACI,yBAAKrE,UAAWgC,IAAMsC,MAClB,yBACI5B,IAAI,sHACJI,IAAI,SACPsB,EACD,8BAAOC,EAAP,a,SCCNE,EAAcC,YAAiB,IAE/BC,EAAU3F,IAAM4F,MAAK,SAAC9F,GAAsB,IACvC+F,EAAwB/F,EAAxB+F,YAAaC,EAAWhG,EAAXgG,QAMpB,OACI,kBAAC,IAAD,CAAK7C,KAAM,GAAI/B,UAAWgC,IAAM6C,YAAhC,WAEI,6BACI,kBAACC,EAAD,CAAyBnE,SARpB,SAAC0C,GACduB,EAAQvB,EAAS0B,oBASb,yBAAK/E,UAAWgC,IAAMgD,OAEdL,EAAYK,MAAMvD,KAAI,gBAAEwD,EAAF,EAAEA,GAAIb,EAAN,EAAMA,QAASC,EAAf,EAAeA,UAAf,OAA8B,kBAAC,EAAD,CAAMD,QAASA,EACTC,UAAWA,EACX3C,IAAKuD,YA0B7EH,EAA0BrE,YAAwB,CAACC,KAAM,sBAA/BD,EAf6C,SAAC7B,GAE1E,OACI,0BAAM+B,SAAU/B,EAAMgC,cAClB,6BACI,kBAACG,EAAA,EAAD,CAAOC,KAAK,iBAAiBC,YAAY,yBAAyBC,UAAWE,IACtE8D,SAAU,CAACC,IAAUZ,MAEhC,6BACI,6CAQDE,I,QC7BAW,EAFUrG,aAdH,SAACV,GACnB,MAAO,CACHsG,YAAatG,EAAMsG,gBAIF,SAACU,GACtB,MAAO,CACHT,QAAS,SAAChF,GACNyF,EAASC,IAAQC,UAAU3F,QAKdb,CAA4G0F,GCNtHe,EAVC,SAAC5G,GACb,OACI,kBAAC,IAAD,CAAKoB,UAAWgC,IAAMyD,SAClB,kBAAC,EAAD,CAAalE,QAAS3C,EAAM2C,QAASnC,OAAQR,EAAMQ,OAAQI,iBAAkBZ,EAAMY,iBACtEyD,QAASrE,EAAMqE,QAASG,YAAaxE,EAAMwE,YAAaxB,YAAahD,EAAMgD,cACxF,kBAAC,EAAD,Q,yBCON8D,E,+KAGE,IAAIC,EAAShH,KAAKC,MAAMgH,MAAMC,OAAOF,OAChCA,IACGhH,KAAKC,MAAMkH,iBACXH,EAASI,OAAOpH,KAAKC,MAAMkH,iBAE1BH,GACDhH,KAAKC,MAAMoH,QAAQC,KAAK,WAGhCtH,KAAKC,MAAMsH,eAAeP,GAC1BhH,KAAKC,MAAMuH,cAAcR,K,0CAIzBhH,KAAKyH,mB,yCAGUvG,EAAgCC,EAAyBC,GACpEpB,KAAKC,MAAMgH,MAAMC,OAAOF,SAAW9F,EAAU+F,MAAMC,OAAOF,QAC1DhH,KAAKyH,mB,+BAKT,OACI,kBAAC,EAAD,iBAAczH,KAAKC,MAAnB,CAA0B2C,QAAS5C,KAAKC,MAAM2C,QAASnC,OAAQT,KAAKC,MAAMQ,OAChE6D,SAAUtE,KAAKC,MAAMgH,MAAMC,OAAOF,OAClCnG,iBAAkBb,KAAKC,MAAMY,iBAC7B4D,YAAazE,KAAKC,MAAMyH,UACxBzE,YAAajD,KAAKC,MAAMgD,mB,GAhCf9C,IAAML,WA4CtB6H,sBACXvH,aAPoB,SAACV,GAAD,MAA6C,CACjEkD,QAASlD,EAAMsG,YAAYpD,QAC3BnC,OAAQf,EAAMsG,YAAYvF,OAC1B0G,eAAgBzH,EAAME,KAAK0G,MAIuD,CAC9EiB,mBACAC,kBACA3G,qBACA6G,cACAzE,kBAEJ2E,IACA/H,IATW8H,CAUbZ","file":"static/js/5.c892eee5.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {AppRootState} from \"../redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\n\r\ntype MapStateForRedirectPropsType = {\r\n    isAuth: boolean;\r\n}\r\nconst mapStateForRedirect = (state: AppRootState): MapStateForRedirectPropsType => ({\r\n    isAuth: state.auth.isAuth\r\n});\r\n\r\nexport const withAuthRedirect = (Component: any) => {\r\n\r\n    class RedirectComponent extends React.Component<any> {\r\n        render() {\r\n            if (!this.props.isAuth) {\r\n                return <Redirect to={'/login'}/>\r\n            }\r\n            return <Component {...this.props}/>\r\n        }\r\n    }\r\n\r\n    let connectedRedirectComponent = connect<MapStateForRedirectPropsType, {}, {}, AppRootState>(mapStateForRedirect,{})(RedirectComponent);\r\n    return connectedRedirectComponent;\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profileInfo\":\"profileInfo_profileInfo__1p1Bw\",\"panel\":\"profileInfo_panel__2hOh_\",\"panelDefault\":\"profileInfo_panelDefault__2MzTV\",\"panelHeading\":\"profileInfo_panelHeading__i8IxH\",\"panelTitle\":\"profileInfo_panelTitle__OS0ES\",\"panelBody\":\"profileInfo_panelBody__mUXs-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profileStatusBlock\":\"ProfileStatus_profileStatusBlock__1i51s\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"myPosts_postsBlock__3b2mG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"post_item__XC1dh\"};","import React, {ChangeEvent} from 'react';\r\nimport styles from './ProfileStatus.module.css';\r\n\r\ntype PropsType = {\r\n    status: string;\r\n    updateUserStatus: (status: string) => void;\r\n}\r\ntype StateType = {\r\n    editMode: boolean;\r\n    status: string;\r\n}\r\nexport class ProfileStatus extends React.Component<PropsType,StateType> {\r\n    state = {\r\n        editMode: false,\r\n        status: this.props.status\r\n    }\r\n\r\n    activateEditMode = () => {\r\n        this.setState({\r\n            editMode: true\r\n        });\r\n    }\r\n    deactivateEditMode = () => {\r\n        this.setState({\r\n            editMode: false\r\n        });\r\n        this.props.updateUserStatus(this.state.status);\r\n    }\r\n\r\n    onChangeStatus = (e: ChangeEvent<HTMLInputElement>) => {\r\n        this.setState({\r\n            status: e.currentTarget.value\r\n        });\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<PropsType>, prevState: Readonly<StateType>, snapshot?: any) {\r\n        if (prevProps.status !== this.props.status) {\r\n            this.setState({\r\n                status: this.props.status\r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={styles.profileStatusBlock}>\r\n                {this.state.editMode\r\n                && <input type={'text'}\r\n\t\t\t\t\t\t  value={this.state.status}\r\n\t\t\t\t\t\t  autoFocus={true}\r\n\t\t\t\t\t\t  onBlur={this.deactivateEditMode}\r\n\t\t\t\t\t\t  onChange={this.onChangeStatus}\r\n\t\t\t\t/>}\r\n\r\n                {!this.state.editMode && <div>\r\n\t\t\t\t\t<b>status</b>:<span onDoubleClick={this.activateEditMode}>{this.props.status || 'No status'}</span>\r\n\t\t\t\t</div>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport {Field, InjectedFormProps, reduxForm} from 'redux-form';\r\nimport {Input, Textarea} from '../../../common/formsControls/FormsControls';\r\nimport {ProfileType} from '../profileInfo';\r\nimport styles from '../../../common/formsControls/FormsControls.module.css';\r\n\r\n\r\n//Profile FORM\r\nexport type ProfileDataFormType = {\r\n    aboutMe: string;\r\n    fullName: string;\r\n    lookingForAJobDescription: string;\r\n}\r\ntype PropsType = {\r\n    profile: ProfileType;\r\n}\r\n\r\nconst ProfileDataForm: React.FC<PropsType & InjectedFormProps<ProfileDataFormType, PropsType>> = (props) => {\r\n\r\n    return <form onSubmit={props.handleSubmit}>\r\n        {/*обработка ошибок в redux-form*/}\r\n        {props.error && <div className={styles.commonErrorField}>\r\n            {props.error}\r\n        </div>}\r\n        <div>\r\n            <b>Full name </b>: <Field name={'fullName'} placeholder={'Full name '} component={Input}/>\r\n        </div>\r\n        <div>\r\n            <b>Looking for a job </b>: <Field name={'checkbox'} placeholder={''} type={'checkbox'} component={Input}/>\r\n        </div>\r\n\r\n        <div>\r\n            <b>Looking for a job description </b>: <Field name={'lookingForAJobDescription'}\r\n                                                          placeholder={'Looking for a job description '}\r\n                                                          component={Textarea}/>\r\n        </div>\r\n\r\n        <div>\r\n            <b>About me</b>: <Field name={'aboutMe'}\r\n                                    placeholder={'About me'}\r\n                                    component={Textarea}/>\r\n        </div>\r\n        <div>\r\n            <b>Contacts </b>: {Object.keys(props.profile.contacts).map(key => <div key={key}>\r\n            <b>{key}</b>:\r\n            <Field name={'contacts.' + key} placeholder={key} component={Input}/>\r\n        </div>)}\r\n        </div>\r\n        <div>\r\n            {/*<UserButton label={'logOut'}/>*/}\r\n            <button>save</button>\r\n        </div>\r\n    </form>\r\n}\r\nconst ProfileDataFormRedux = reduxForm<ProfileDataFormType, PropsType>({form: 'edit-profile'})(ProfileDataForm);\r\n\r\nexport default ProfileDataFormRedux;","import React, {ChangeEvent, useState} from 'react';\r\nimport style from './profileInfo.module.css';\r\nimport Preloader from '../../../assets/preloader/Preloader';\r\nimport userPhoto from '../../../assets/images/green.png'\r\nimport {ProfileStatus} from './profilestatus/ProfileStatus';\r\nimport ProfileDataFormRedux, {ProfileDataFormType} from './ProfileDataForm/ProfileDataForm';\r\nimport {Col, Image, Row} from 'antd';\r\n\r\nexport type ProfileType = {\r\n    aboutMe: string,\r\n    contacts: {\r\n        [key: string]: string\r\n    },\r\n    lookingForAJob: boolean,\r\n    lookingForAJobDescription: string,\r\n    fullName: string,\r\n    userId: number,\r\n    photos: {\r\n        small: string,\r\n        large: string\r\n    }\r\n}\r\n\r\nexport type ProfileInfoPropsType = {\r\n    profile: ProfileType,\r\n    status: string;\r\n    updateUserStatus: (status: string) => void;\r\n    isOwner: boolean\r\n    onUploadImg: (file: any) => void;\r\n    saveProfile: (profile: ProfileDataFormType) => any;\r\n}\r\n\r\nconst ProfileInfo = (props: ProfileInfoPropsType) => {\r\n    const {profile, saveProfile} = props;\r\n\r\n    const [editMode, setEditMode] = useState<boolean>(false);\r\n\r\n    const onUploadImg = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files && e.target.files[0]) {\r\n            props.onUploadImg(e.target.files[0]);\r\n        }\r\n    }\r\n    const onSubmit = (formData: ProfileDataFormType) => {\r\n        saveProfile(formData)\r\n            .then(() => {\r\n                setEditMode(false);\r\n            });\r\n    }\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n    return (\r\n        <Col span={24} className={style.profileInfo}>\r\n            <Row gutter={8}>\r\n                <Col\r\n                    md={{span: 24}}\r\n                    lg={{span: 8}}\r\n                >\r\n                    <div className={`${style.panel} ${style.panelDefault}`}>\r\n                        <div className={`${style.panelHeading}`}>\r\n                            <header className={`${style.panelTitle}`}>\r\n                                <strong>Пользователь сайта</strong>\r\n                            </header>\r\n                        </div>\r\n                        <div className={`${style.panelBody}`}>\r\n                            <Image\r\n                                // width={200}\r\n                                src={profile.photos.large !== null ? profile.photos.large : userPhoto}\r\n                                alt='User avator'\r\n                            />\r\n                            <h3>{profile.fullName}</h3>\r\n                            <ProfileStatus status={props.status} updateUserStatus={props.updateUserStatus}/>\r\n                        </div>\r\n                    </div>\r\n                </Col>\r\n                <Col\r\n                    md={{span: 24}}\r\n                    lg={{span: 16}}\r\n                >\r\n                    <div className={`${style.panel}`}>\r\n                        <div className={`${style.panelBody}`}>\r\n                            <div className={`${style.panelBtn}`}>\r\n                                {\r\n                                    props.isOwner &&\r\n                                    <div>\r\n                                        <h3>Изменить аватар пользователя</h3>\r\n                                        <input type=\"file\" onChange={onUploadImg}/>\r\n                                    </div>\r\n                                }\r\n                                <hr/>\r\n                            </div>\r\n                            {\r\n                                editMode ?\r\n                                    <ProfileDataFormRedux onSubmit={onSubmit} initialValues={profile}\r\n                                                          profile={profile}/> :\r\n                                    <ProfileData profile={profile} isOwner={props.isOwner}\r\n                                                 goToEditMode={() => setEditMode(true)}/>\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                </Col>\r\n            </Row>\r\n\r\n        </Col>\r\n    );\r\n}\r\n\r\nexport default ProfileInfo;\r\n\r\n\r\n//Profile Data\r\ntype ProfileDataPropsType = {\r\n    profile: ProfileType;\r\n    isOwner: boolean;\r\n    goToEditMode: () => void;\r\n}\r\n\r\nexport const ProfileData: React.FC<ProfileDataPropsType> = ({profile, isOwner, goToEditMode}) => {\r\n    return <div>\r\n        <h3>Профайл пользователя</h3>\r\n        <div>\r\n            <b>Looking for a job </b>: {profile.lookingForAJob ? 'yes' : 'no'}\r\n        </div>\r\n        {\r\n            profile.lookingForAJob &&\r\n            <div>\r\n                <b>Looking for a job description </b>: {profile.lookingForAJobDescription}\r\n            </div>\r\n        }\r\n        <div>\r\n            <b>About me </b>: {profile.aboutMe}\r\n        </div>\r\n        <div>\r\n            <b>Contacts </b>: {Object.keys(profile.contacts).map(key => <Contact contactTitle={key}\r\n                                                                                 contactValue={profile.contacts[key]}\r\n                                                                                 key={key}/>)}\r\n        </div>\r\n        {isOwner &&\r\n        <div>\r\n            <button onClick={goToEditMode}>Edit profile</button>\r\n        </div>\r\n        }\r\n    </div>\r\n}\r\n\r\n//Contact\r\ntype ContactPropsType = {\r\n    contactTitle: string;\r\n    contactValue: string;\r\n}\r\n\r\nexport const Contact: React.FC<ContactPropsType> = (props) => {\r\n    const {contactTitle, contactValue} = props;\r\n    return <div className={style.contact}>\r\n        <b>{contactTitle}</b>: {contactValue ? contactValue : 'Пользователь не зарегистрирован'}\r\n    </div>\r\n}","import React from 'react';\r\nimport style from './post.module.css';\r\n\r\ntype propsType = {\r\n    message : string,\r\n    likeCount : string\r\n}\r\n\r\nconst Post = (props : propsType) => {\r\n    const {message, likeCount} = props;\r\n\r\n    return (\r\n        <div className={style.item}>\r\n            <img\r\n                src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcTmHvlQey7sRB-lIKvwZQHlY-Gwi0TIDWloz6LZcCYwdubZ5-nV&usqp=CAU\"\r\n                alt=\"user\"/>\r\n            {message}\r\n            <span>{likeCount} - like</span>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Post;","import React from 'react';\r\nimport style from './myPosts.module.css';\r\nimport Post from './post/post';\r\nimport {ProfileType} from '../profileInfo/profileInfo';\r\nimport {Field, InjectedFormProps, reduxForm} from 'redux-form';\r\nimport {maxLengthCreator, required} from '../../../utils/validators/validators';\r\nimport {Textarea} from '../../common/formsControls/FormsControls';\r\nimport {ObjPostType} from '../../../types/types';\r\nimport {Col} from 'antd';\r\n\r\ntype PropsType = {\r\n    profilePage: {\r\n        posts: Array<ObjPostType>;\r\n        profile: ProfileType | null;\r\n    };\r\n    addPost: (value: string) => void;\r\n}\r\n\r\nconst maxLength30 = maxLengthCreator(30);\r\n\r\nconst MyPosts = React.memo((props: PropsType) => {\r\n    const {profilePage, addPost} = props;\r\n\r\n    const onSubmit = (formData: FormDataType) => {\r\n        addPost(formData.newMessageBody)\r\n    }\r\n\r\n    return (\r\n        <Col span={24} className={style.postsBlock}>\r\n            My Posts\r\n            <div>\r\n                <AddPostMessageFormRedux onSubmit={onSubmit}/>\r\n            </div>\r\n            <div className={style.posts}>\r\n                {\r\n                    profilePage.posts.map(({id, message, likeCount}) => <Post message={message}\r\n                                                                              likeCount={likeCount}\r\n                                                                              key={id}/>)\r\n                }\r\n            </div>\r\n        </Col>\r\n    );\r\n});\r\n\r\ntype FormDataType = {\r\n    newMessageBody: string\r\n}\r\n\r\nexport const AddPostMessageForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\r\n\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field name='newMessageBody' placeholder='Enter you Post message' component={Textarea}\r\n                       validate={[required, maxLength30]}/>\r\n            </div>\r\n            <div>\r\n                <button>Send</button>\r\n            </div>\r\n        </form>\r\n    );\r\n}\r\n\r\nconst AddPostMessageFormRedux = reduxForm<FormDataType>({form: 'addPostMessageForm'})(AddPostMessageForm);\r\n\r\nexport default MyPosts;","import {actions, ProfileReducerInitialStateType} from \"../../../redux/profile-reducer\";\r\nimport MyPosts from \"./myPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppRootState} from \"../../../redux/redux-store\";\r\nimport {Dispatch} from \"redux\";\r\n\r\ntype ObjType = {\r\n    id: string,\r\n    message: string,\r\n    likeCount: string\r\n}\r\n\r\ntype MapStateToPropsType = {\r\n    profilePage: ProfileReducerInitialStateType\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    addPost: (value: string) => void;\r\n}\r\n\r\nlet mapStateToProps = (state: AppRootState): MapStateToPropsType => {\r\n    return {\r\n        profilePage: state.profilePage\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType => {\r\n    return {\r\n        addPost: (value: string) => {\r\n            dispatch(actions.addPostAC(value));\r\n        }\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect<MapStateToPropsType, MapDispatchToPropsType, {}, AppRootState>(mapStateToProps, mapDispatchToProps)(MyPosts);\r\n\r\nexport default MyPostsContainer;","import React from 'react';\r\nimport style from './profile.module.css';\r\nimport ProfileInfo from \"./profileInfo/profileInfo\";\r\nimport MyPostsContainer from \"./my-posts/myPostsContainer\";\r\nimport {ProfileDataFormType} from \"./profileInfo/ProfileDataForm/ProfileDataForm\";\r\nimport { Row } from 'antd';\r\n\r\ntype propsType = {\r\n    getUserProfile: (userId: string) => void,\r\n    profile: any;\r\n    status: string;\r\n    updateUserStatus: (status: string) => void;\r\n    isOwner: boolean\r\n    onUploadImg: (file: any) => void;\r\n    saveProfile: (profile: ProfileDataFormType) => void;\r\n}\r\n\r\n// FC<ProfileContainerProps>\r\nconst Profile = (props: propsType) => {\r\n    return (\r\n        <Row className={style.content}>\r\n            <ProfileInfo profile={props.profile} status={props.status} updateUserStatus={props.updateUserStatus}\r\n                         isOwner={props.isOwner} onUploadImg={props.onUploadImg} saveProfile={props.saveProfile}/>\r\n            <MyPostsContainer/>\r\n        </Row>\r\n    );\r\n}\r\n\r\nexport default Profile;","import React from \"react\";\r\nimport Profile from \"./profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {getUserProfile, getUserStatus, savePhoto, saveProfile, updateUserStatus} from \"../../redux/profile-reducer\";\r\nimport {AppRootState} from \"../../redux/redux-store\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport { ProfileType} from \"./profileInfo/profileInfo\";\r\nimport {compose} from \"redux\";\r\nimport {ProfileDataFormType} from \"./profileInfo/ProfileDataForm/ProfileDataForm\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\n\r\ntype PathParamsType = {\r\n    userId: string;\r\n}\r\ntype MapStatePropsType = {\r\n    profile: ProfileType | null;\r\n    status: string;\r\n    logginedUserId: number | null;\r\n}\r\ntype MapDispatchToProps = {\r\n    getUserProfile: (userId: string) => void;\r\n    getUserStatus: (userId: string) => void;\r\n    updateUserStatus: (status: string) => void;\r\n    savePhoto: (file: File) => void;\r\n    saveProfile: (profile: ProfileDataFormType) => void;\r\n}\r\ntype OwnPropsType = MapStatePropsType & MapDispatchToProps;\r\ntype PropsType = RouteComponentProps<PathParamsType> & OwnPropsType;\r\n\r\n\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n\r\n    refreshProfile() {\r\n        let userId = this.props.match.params.userId;\r\n        if (!userId) {\r\n            if (this.props.logginedUserId) {\r\n                userId = String(this.props.logginedUserId);\r\n            }\r\n            if (!userId) {\r\n                this.props.history.push(\"/login\");\r\n            }\r\n        }\r\n        this.props.getUserProfile(userId);\r\n        this.props.getUserStatus(userId);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile();\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<PropsType>, prevState: Readonly<{}>, snapshot?: any) {\r\n        if (this.props.match.params.userId !== prevProps.match.params.userId) {\r\n            this.refreshProfile();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Profile  {...this.props} profile={this.props.profile} status={this.props.status}\r\n                      isOwner={!this.props.match.params.userId}\r\n                      updateUserStatus={this.props.updateUserStatus}\r\n                      onUploadImg={this.props.savePhoto}\r\n                      saveProfile={this.props.saveProfile}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppRootState): MapStatePropsType => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    logginedUserId: state.auth.id\r\n});\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect<MapStatePropsType, MapDispatchToProps, {}, AppRootState>(mapStateToProps, {\r\n        getUserProfile,\r\n        getUserStatus,\r\n        updateUserStatus,\r\n        savePhoto,\r\n        saveProfile\r\n    }),\r\n    withRouter,\r\n    withAuthRedirect\r\n)(ProfileContainer);\r\n\r\n// let AuthRedirectComponent = withAuthRedirect(ProfileContainer);\r\n//\r\n//\r\n//\r\n// let WithUrlDataContainerComponent = withRouter(AuthRedirectComponent);\r\n//\r\n// export default connect<MapStatePropsType, MapDispatchToProps, {}, AppRootState>(mapStateToProps, {getUserProfile})(WithUrlDataContainerComponent);\r\n"],"sourceRoot":""}