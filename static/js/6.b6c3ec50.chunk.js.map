{"version":3,"sources":["hoc/withAuthRedirect.tsx","components/dialogs/dialogs.module.css","components/dialogs/dialogItem/dialogItem.tsx","components/dialogs/message/message.tsx","components/dialogs/dialogs.tsx","components/dialogs/dialogsContainer.tsx"],"names":["mapStateForRedirect","state","isAuth","auth","withAuthRedirect","Component","RedirectComponent","this","props","to","React","connect","module","exports","Meta","Card","DialogItem","name","id","url","className","style","dialog","active","bordered","avatar","src","size","Message","userPhoto","useSelector","profilePage","profile","photos","small","useState","likes","setLikes","dislikes","setDislikes","action","setAction","actions","key","title","onClick","createElement","LikeFilled","LikeOutlined","DislikeFilled","DislikeOutlined","author","userPhotos","content","message","maxLength30","maxLengthCreator","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","AddMessageForm","areaBox","Item","Field","placeholder","component","Textarea","validate","required","UserButton","label","Dialogs","addMess","dialogsPage","dialogsElements","dialogs","map","span","messagesElements","messages","dialogItems","gutter","formData","newMessageBody","compose","dispatch","value","addMessAC"],"mappings":"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","file":"static/js/6.b6c3ec50.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {AppRootState} from \"../redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\n\r\ntype MapStateForRedirectPropsType = {\r\n    isAuth: boolean;\r\n}\r\nconst mapStateForRedirect = (state: AppRootState): MapStateForRedirectPropsType => ({\r\n    isAuth: state.auth.isAuth\r\n});\r\n\r\nexport const withAuthRedirect = (Component: any) => {\r\n\r\n    class RedirectComponent extends React.Component<any> {\r\n        render() {\r\n            if (!this.props.isAuth) {\r\n                return <Redirect to={'/login'}/>\r\n            }\r\n            return <Component {...this.props}/>\r\n        }\r\n    }\r\n\r\n    let connectedRedirectComponent = connect<MapStateForRedirectPropsType, {}, {}, AppRootState>(mapStateForRedirect,{})(RedirectComponent);\r\n    return connectedRedirectComponent;\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"dialogs_dialogs__3xkII\",\"dialogItems\":\"dialogs_dialogItems__2ZXmT\",\"active\":\"dialogs_active__2SkgZ\",\"dialog\":\"dialogs_dialog__kY9kn\",\"messages\":\"dialogs_messages__3XOI-\",\"message\":\"dialogs_message__28e75\",\"AddMessageForm\":\"dialogs_AddMessageForm__2n10N\",\"btn\":\"dialogs_btn__40Zub\",\"areaBox\":\"dialogs_areaBox__2nUV0\"};","import style from '../dialogs.module.css';\r\nimport {NavLink} from 'react-router-dom';\r\nimport React from 'react';\r\nimport {Avatar, Card, Row} from 'antd';\r\n\r\nconst {Meta} = Card;\r\n\r\nexport type DialogItemType = {\r\n    name: string,\r\n    id: string\r\n    url: string\r\n}\r\n\r\nexport const DialogItem = (props: DialogItemType) => {\r\n    const {name, id, url} = props;\r\n    return (\r\n        <Card className={style.dialog + ' ' + style.active} bordered>\r\n            <Row>\r\n                <Meta avatar={<Avatar src={url} size={48}/>}/>\r\n                <NavLink to={`/dialogs/${id}`} style={{}}>{name}</NavLink>\r\n            </Row>\r\n        </Card>\r\n    );\r\n}","import React, {createElement, useState} from 'react';\r\nimport {Avatar, Comment, Tooltip} from 'antd';\r\nimport {DislikeFilled, DislikeOutlined, LikeFilled, LikeOutlined} from '@ant-design/icons';\r\nimport userPhotos from '../../../assets/images/green.png';\r\nimport {useSelector} from 'react-redux';\r\nimport {AppRootState} from '../../../redux/redux-store';\r\n\r\ntype MessageType = {\r\n    message: string\r\n}\r\n\r\nexport const Message = (props: MessageType) => {\r\n    const userPhoto = useSelector<AppRootState, any>(state => state.profilePage.profile?.photos.small);\r\n\r\n    const [likes, setLikes] = useState<number>(0);\r\n    const [dislikes, setDislikes] = useState<number>(0);\r\n    const [action, setAction] = useState<null | string>(null);\r\n\r\n    const like = () => {\r\n        setLikes(1);\r\n        setDislikes(0);\r\n        setAction('liked');\r\n    };\r\n\r\n    const dislike = () => {\r\n        setLikes(0);\r\n        setDislikes(1);\r\n        setAction('disliked');\r\n    };\r\n\r\n    const actions = [\r\n        <Tooltip key=\"comment-basic-like\" title=\"Like\">\r\n      <span onClick={like}>\r\n        {createElement(action === 'liked' ? LikeFilled : LikeOutlined)}\r\n          <span className=\"comment-action\">{likes}</span>\r\n      </span>\r\n        </Tooltip>,\r\n        <Tooltip key=\"comment-basic-dislike\" title=\"Dislike\">\r\n      <span onClick={dislike}>\r\n        {React.createElement(action === 'disliked' ? DislikeFilled : DislikeOutlined)}\r\n          <span className=\"comment-action\">{dislikes}</span>\r\n      </span>\r\n        </Tooltip>,\r\n        <span key=\"comment-basic-reply-to\">Reply to</span>,\r\n    ];\r\n\r\n\r\n    return (\r\n        //old\r\n        // <div className={style.message}>{props.message}</div>\r\n        <Comment\r\n            actions={actions}\r\n            author={<a>Alex Gor</a>}\r\n            avatar={\r\n                userPhoto ? <Avatar src={userPhoto}/> : <Avatar src={userPhotos}/>\r\n            }\r\n            content={\r\n                <p>\r\n                    {props.message}\r\n                </p>\r\n            }\r\n        />\r\n    );\r\n}","import React from 'react';\r\nimport {DialogItem, DialogItemType} from './dialogItem/dialogItem';\r\nimport {Message} from './message/message';\r\nimport style from './dialogs.module.css';\r\nimport {Field, InjectedFormProps, reduxForm} from 'redux-form';\r\nimport {Textarea} from '../common/formsControls/FormsControls';\r\nimport {maxLengthCreator, required} from '../../utils/validators/validators';\r\nimport {Col, Form, Row} from 'antd';\r\nimport {UserButton} from '../common/userButton/UserButton';\r\n\r\n\r\nexport type MessagesType = {\r\n    id: string,\r\n    message: string\r\n}\r\n\r\ntype propsType = {\r\n    dialogsPage: {\r\n        dialogs: Array<DialogItemType>,\r\n        messages: Array<MessagesType>,\r\n        newMessageText: string\r\n    };\r\n    addMess: (value: string) => void;\r\n    isAuth: boolean;\r\n}\r\nconst maxLength30 = maxLengthCreator(30);\r\n\r\nconst Dialogs = (props: propsType) => {\r\n    const {addMess, dialogsPage} = props;\r\n\r\n    let dialogsElements = dialogsPage.dialogs.map(({name, id, url}) => <Col span={24}>\r\n        <DialogItem name={name} id={id} key={id} url={url}/>\r\n    </Col>)\r\n    let messagesElements = dialogsPage.messages.map(({id, message}) => <Message message={message} key={id}/>);\r\n\r\n    const onSubmit = (formData: FormDataType) => {\r\n        addMess(formData.newMessageBody);\r\n    }\r\n\r\n    return (\r\n        <div className={style.dialogs}>\r\n            <Row className={style.dialogItems} gutter={[16, 16]}>\r\n                {\r\n                    dialogsElements\r\n                }\r\n            </Row>\r\n            <div className={style.messages}>\r\n                <div>\r\n                    {\r\n                        messagesElements\r\n                    }\r\n                </div>\r\n                <AddMessageFormRedux onSubmit={onSubmit}/>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\ntype FormDataType = {\r\n    newMessageBody: string\r\n}\r\n\r\nexport const AddMessageForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit} className={style.AddMessageForm}>\r\n            <div className={style.areaBox}>\r\n                <Form.Item>\r\n                    <Field name={'newMessageBody'} placeholder={'enter you message'} component={Textarea}\r\n                           validate={[required, maxLength30]}\r\n                    />\r\n                </Form.Item>\r\n            </div>\r\n            <UserButton label={'Add message'}/>\r\n            {/*<button className={style.btn}>Add message</button>*/}\r\n        </form>\r\n    );\r\n}\r\n\r\nconst AddMessageFormRedux = reduxForm<FormDataType>({form: 'dialogAddMessageForm'})(AddMessageForm);\r\n\r\nexport default Dialogs;","import {actions, DialogsReducerInitialStateType} from \"../../redux/dialogs-reducer\";\r\nimport Dialogs from \"./dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppRootState} from \"../../redux/redux-store\";\r\nimport {compose, Dispatch} from \"redux\";\r\n// import React from \"react\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport React from \"react\";\r\n\r\ntype MapStateToPropsType = {\r\n    dialogsPage: DialogsReducerInitialStateType;\r\n}\r\ntype MapDispatchToPropsType = {\r\n    addMess: (value: string) => void;\r\n}\r\n\r\nlet mapStateToProps = (state: AppRootState): MapStateToPropsType => {\r\n    return {\r\n        dialogsPage: state.dialogsPage\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType => {\r\n    return {\r\n        addMess: (value: string) => {\r\n            dispatch(actions.addMessAC(value));\r\n        }\r\n    }\r\n}\r\n\r\n// const AuthRedirectComponent = withAuthRedirect(Dialogs);\r\n//\r\n// const DialogsContainer = connect<MapStateToPropsType, MapDispatchToPropsType, {}, AppRootState>(mapStateToProps, mapDispatchToProps)(AuthRedirectComponent);\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect<MapStateToPropsType, MapDispatchToPropsType, {}, AppRootState>(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n)(Dialogs);"],"sourceRoot":""}