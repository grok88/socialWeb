{"version":3,"sources":["components/dialogs/dialogs.module.css","components/dialogs/dialogItem/dialogItem.tsx","components/dialogs/message/message.tsx","components/dialogs/dialogs.tsx","components/dialogs/dialogsContainer.tsx"],"names":["module","exports","DialogItem","props","name","id","url","className","style","dialog","active","src","alt","width","height","to","Message","message","maxLength30","maxLengthCreator","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","placeholder","component","Textarea","validate","required","Dialogs","addMess","dialogsPage","dialogsElements","dialogs","map","key","messagesElements","messages","dialogItems","formData","newMessageBody","compose","connect","state","dispatch","value","addMessAC","withAuthRedirect"],"mappings":"mGACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,YAAc,6BAA6B,OAAS,wBAAwB,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,2B,+FCSpMC,EAAa,SAACC,GAA2B,IAC3CC,EAAiBD,EAAjBC,KAAMC,EAAWF,EAAXE,GAAIC,EAAOH,EAAPG,IACjB,OACI,yBAAKC,UAAWC,IAAMC,OAAS,IAAMD,IAAME,QACvC,yBAAKC,IAAKL,EAAKM,IAAI,aAAaC,MAAO,GAAIC,OAAQ,KACnD,kBAAC,IAAD,CAASC,GAAE,mBAAcV,IAAOD,KCR/BY,EAAU,SAACb,GACpB,OACI,yBAAKI,UAAWC,IAAMS,SAAUd,EAAMc,U,kCCaxCC,EAAcC,YAAiB,IA6C/BC,EAAsBC,YAAwB,CAACC,KAAM,wBAA/BD,EAX6C,SAAClB,GACtE,OACI,0BAAMoB,SAAUpB,EAAMqB,cAClB,kBAACC,EAAA,EAAD,CAAOrB,KAAM,iBAAkBsB,YAAa,oBAAsBC,UAAWC,IACtEC,SAAU,CAACC,IAAUZ,KAE5B,mDAOGa,EA7CC,SAAC5B,GAAsB,IAC5B6B,EAAwB7B,EAAxB6B,QAASC,EAAe9B,EAAf8B,YAEZC,EAAkBD,EAAYE,QAAQC,KAAI,gBAAEhC,EAAF,EAAEA,KAAMC,EAAR,EAAQA,GAAIC,EAAZ,EAAYA,IAAZ,OAAqB,kBAAC,EAAD,CAAYF,KAAMA,EAAMC,GAAIA,EAAIgC,IAAKhC,EACzBC,IAAKA,OAChFgC,EAAmBL,EAAYM,SAASH,KAAI,gBAAE/B,EAAF,EAAEA,GAAIY,EAAN,EAAMA,QAAN,OAAmB,kBAAC,EAAD,CAASA,QAASA,EAASoB,IAAKhC,OAMnG,OACI,yBAAKE,UAAWC,IAAM2B,SAClB,yBAAK5B,UAAWC,IAAMgC,aAEdN,GAGR,yBAAK3B,UAAWC,IAAM+B,UAEdD,EAEJ,kBAAClB,EAAD,CAAqBG,SAfhB,SAACkB,GACdT,EAAQS,EAASC,sB,uBCCVC,sBACXC,aAlBkB,SAACC,GACnB,MAAO,CACHZ,YAAaY,EAAMZ,gBAGF,SAACa,GACtB,MAAO,CACHd,QAAS,SAACe,GACND,EAASE,YAAUD,SAW3BE,IAFWN,CAGbZ","file":"static/js/4.06c760a0.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"dialogs_dialogs__3xkII\",\"dialogItems\":\"dialogs_dialogItems__2ZXmT\",\"active\":\"dialogs_active__2SkgZ\",\"dialog\":\"dialogs_dialog__kY9kn\",\"messages\":\"dialogs_messages__3XOI-\",\"message\":\"dialogs_message__28e75\"};","import style from \"../dialogs.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport React from \"react\";\r\n\r\n export type DialogItemType = {\r\n    name: string,\r\n    id: string\r\n    url:string\r\n}\r\n\r\nexport const DialogItem = (props: DialogItemType) => {\r\n    const {name, id, url} = props;\r\n    return (\r\n        <div className={style.dialog + ' ' + style.active}>\r\n            <img src={url} alt=\"userAvatar\" width={40} height={40}/>\r\n            <NavLink to={`/dialogs/${id}`}>{name}</NavLink>\r\n        </div>\r\n    );\r\n}","import style from \"../dialogs.module.css\";\r\nimport React from \"react\";\r\n\r\ntype MessageType = {\r\n    message: string\r\n}\r\n\r\nexport const Message = (props: MessageType) => {\r\n    return (\r\n        <div className={style.message}>{props.message}</div>\r\n    );\r\n}","import React from 'react';\r\nimport {DialogItem, DialogItemType} from \"./dialogItem/dialogItem\";\r\nimport {Message} from \"./message/message\";\r\nimport style from \"./dialogs.module.css\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport { Textarea } from '../common/formsControls/FormsControls';\r\nimport {maxLengthCreator, required} from \"../../utils/validators/validators\";\r\n\r\nexport type MessagesType = {\r\n    id: string,\r\n    message: string\r\n}\r\n\r\ntype propsType = {\r\n    dialogsPage: {\r\n        dialogs: Array<DialogItemType>,\r\n        messages: Array<MessagesType>,\r\n        newMessageText: string\r\n    };\r\n    addMess: (value: string) => void;\r\n    isAuth: boolean;\r\n}\r\nconst maxLength30 = maxLengthCreator(30);\r\n\r\nconst Dialogs = (props: propsType) => {\r\n    const {addMess, dialogsPage} = props;\r\n\r\n    let dialogsElements = dialogsPage.dialogs.map(({name, id, url}) => <DialogItem name={name} id={id} key={id}\r\n                                                                                   url={url}/>);\r\n    let messagesElements = dialogsPage.messages.map(({id, message}) => <Message message={message} key={id}/>);\r\n\r\n    const onSubmit = (formData: FormDataType) => {\r\n        addMess(formData.newMessageBody);\r\n    }\r\n\r\n    return (\r\n        <div className={style.dialogs}>\r\n            <div className={style.dialogItems}>\r\n                {\r\n                    dialogsElements\r\n                }\r\n            </div>\r\n            <div className={style.messages}>\r\n                {\r\n                    messagesElements\r\n                }\r\n                <AddMessageFormRedux onSubmit={onSubmit}/>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\ntype FormDataType = {\r\n    newMessageBody: string\r\n}\r\n\r\nexport const AddMessageForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <Field name={'newMessageBody'} placeholder={'enter you message'}  component={Textarea}\r\n                   validate={[required, maxLength30]}\r\n            />\r\n            <button>Add message</button>\r\n        </form>\r\n    );\r\n}\r\n\r\nconst AddMessageFormRedux = reduxForm<FormDataType>({form: 'dialogAddMessageForm'})(AddMessageForm);\r\n\r\nexport default Dialogs;","import {addMessAC, DialogsReducerInitialStateType} from \"../../redux/dialogs-reducer\";\r\nimport Dialogs from \"./dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppRootState} from \"../../redux/redux-store\";\r\nimport {compose, Dispatch} from \"redux\";\r\n// import React from \"react\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport React from \"react\";\r\n\r\ntype MapStateToPropsType = {\r\n    dialogsPage: DialogsReducerInitialStateType;\r\n}\r\ntype MapDispatchToPropsType = {\r\n    addMess: (value: string) => void;\r\n}\r\n\r\nlet mapStateToProps = (state: AppRootState): MapStateToPropsType => {\r\n    return {\r\n        dialogsPage: state.dialogsPage\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType => {\r\n    return {\r\n        addMess: (value: string) => {\r\n            dispatch(addMessAC(value));\r\n        }\r\n    }\r\n}\r\n\r\n// const AuthRedirectComponent = withAuthRedirect(Dialogs);\r\n//\r\n// const DialogsContainer = connect<MapStateToPropsType, MapDispatchToPropsType, {}, AppRootState>(mapStateToProps, mapDispatchToProps)(AuthRedirectComponent);\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect<MapStateToPropsType, MapDispatchToPropsType, {}, AppRootState>(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n)(Dialogs);"],"sourceRoot":""}