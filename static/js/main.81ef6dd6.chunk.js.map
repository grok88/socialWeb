{"version":3,"sources":["utils/validators/validators.ts","hoc/withAuthRedirect.tsx","api/profile-api.ts","redux/profile-reducer.tsx","assets/images/green.png","api/api.ts","redux/dialogs-reducer.tsx","components/news/news.module.css","assets/preloader/svg-loaders/oval.svg","components/common/Paginator/Paginator.module.css","components/news/news.tsx","components/music/music.tsx","components/settings/settings.tsx","components/common/Paginator/Paginator.tsx","components/users/User.tsx","components/users/UsersClass.tsx","utils/object-helpers.ts","api/users-api.ts","redux/users-reducer.tsx","redux/users-selectors.ts","components/users/UsersContainer.ts","api/auth-api.ts","api/security-api.ts","redux/auth-reducer.ts","components/login/Login.tsx","redux/navbar-reducer.tsx","redux/app-reducer.ts","redux/redux-store.tsx","redux/auth-selectors.ts","components/header/header.tsx","App.tsx","index.tsx","components/common/formsControls/FormsControls.tsx","assets/preloader/Preloader.tsx","components/common/formsControls/FormsControls.module.css"],"names":["required","value","undefined","maxLengthCreator","max","length","mapStateForRedirect","state","isAuth","auth","withAuthRedirect","Component","RedirectComponent","this","props","to","React","connect","profileApi","id","instance","get","then","res","data","userId","status","put","photo","formData","FormData","append","headers","profile","ADD_POST","InitialState","posts","v1","message","likeCount","addPostAC","type","setUserStatus","savePhotoSuccess","getUserProfile","dispatch","a","getUserStatus","userID","resp","updateUserStatus","resultCode","console","log","savePhoto","file","getState","profilePage","photos","name","saveProfile","String","stopSubmit","_error","messages","Promise","reject","profileReducer","action","stateCopy","newPost","push","filter","p","postId","module","exports","ResultCodeEnum","ResultCodeForCaptchaEnum","axios","create","withCredentials","baseURL","initialState","dialogs","url","addMessAC","dialogsReducer","newMess","News","className","style","music","Music","Settings","settings","Paginator","pageCount","Math","ceil","totalItemsCount","pageSize","pages","i","portionCount","portionSize","leftPortionPageNumber","portionNumber","rightPortionPageNumber","onClick","setPortionNumber","map","key","currentPage","selectedPage","e","changedPage","User","user","unfollow","follow","src","small","userPhoto","alt","width","height","followed","UsersAPIComponent","pageNumber","getUsers","portionNum","setState","isFetching","Preloader","followSuccess","unFollowSuccess","usersPage","users","totalUsersCount","followingInProgress","Users","updateObjectInArray","items","itemId","itemProps","newObjProps","userApi","response","post","unFollow","delete","actions","setUsers","setCurrentPage","setUsersTotalCount","totalCount","toggleIsFetching","toggleFollowingInProgress","followUnfollowFlow","apiMethod","actionCreator","usersReducer","getIsFetching","createSelector","getPageSize","getTotalUsersCount","getCurrentPage","getFollowingInProgress","requestPage","bind","authApi","email","password","rememberMe","captcha","securityApi","login","authUser","captchaUrl","authReducer","payload","setAuthUserData","authMe","meData","Success","logout","getCaptcha","LoginReduxForm","reduxForm","form","handleSubmit","error","onSubmit","Field","placeholder","component","Input","validate","styles","commonErrorField","CaptchaIsRequired","checkbox","initialValues","SET_STATUS","navbarReducer","initialized","reducers","combineReducers","dialogsPage","sidebar","formReducer","app","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","getIsAuth","getLogin","getAuthUser","Header","Layout","useSelector","userAvatar","useDispatch","span","theme","mode","defaultSelectedKeys","Item","backgroundColor","icon","UserOutlined","SubMenu","Menu","Content","Footer","Sider","DialogsContainer","lazy","ProfileContainer","App","catchAllUnhandledErrors","promiseRejectionEvent","initializeApp","addEventListener","removeEventListener","padding","margin","defaultOpenKeys","title","LaptopOutlined","NotificationOutlined","minHeight","fallback","exact","path","render","UsersContainer","textAlign","AppContainer","withRouter","promise","all","catch","SamuraiApp","ReactDOM","StrictMode","document","getElementById","Element","input","meta","hasError","touched","formControl","Textarea","preloader"],"mappings":"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","file":"static/js/main.81ef6dd6.chunk.js","sourcesContent":["export const required = (value: string) => {\r\n    return value ? undefined : 'Field is required';\r\n}\r\n\r\nexport const maxLengthCreator = (max: number) => (value: string) => {\r\n    return value && value.length > max ? `Must be ${max} characters or less` : undefined;\r\n}","import React from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {AppRootState} from \"../redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\n\r\ntype MapStateForRedirectPropsType = {\r\n    isAuth: boolean;\r\n}\r\nconst mapStateForRedirect = (state: AppRootState): MapStateForRedirectPropsType => ({\r\n    isAuth: state.auth.isAuth\r\n});\r\n\r\nexport const withAuthRedirect = (Component: any) => {\r\n\r\n    class RedirectComponent extends React.Component<any> {\r\n        render() {\r\n            if (!this.props.isAuth) {\r\n                return <Redirect to={'/login'}/>\r\n            }\r\n            return <Component {...this.props}/>\r\n        }\r\n    }\r\n\r\n    let connectedRedirectComponent = connect<MapStateForRedirectPropsType, {}, {}, AppRootState>(mapStateForRedirect)(RedirectComponent);\r\n    return connectedRedirectComponent;\r\n}","import {ProfileDataFormType} from \"../components/profile/profileInfo/ProfileDataForm/ProfileDataForm\";\r\nimport {APIResponseType, instance} from \"./api\";\r\n\r\nimport {ProfileType} from \"../components/profile/profileInfo/profileInfo\";\r\n\r\nexport const profileApi = {\r\n    getUserProfileById(id: string) {\r\n        return instance.get<ProfileType>(`profile/${id}`).then(res => res.data)\r\n    },\r\n    getStatus(userId: string) {\r\n        return instance.get<string>(`profile/status/${userId}`).then(res => res.data);\r\n    },\r\n    updateStatus(status: string) {\r\n        return instance.put<APIResponseType>(`profile/status`, {status}).then(res => res.data);\r\n    },\r\n    savePhoto(photo: any) {\r\n        let formData = new FormData();\r\n        formData.append('image', photo)\r\n        return instance.put<APIResponseType<{ photos: { small: string, large: string } }>>(`profile/photo`, formData, {\r\n            headers: {\r\n                'content-type': 'multipart/form-data'\r\n            }\r\n        }).then(res => res.data);\r\n    },\r\n    saveProfile(profile: ProfileDataFormType) {\r\n        return instance.put<APIResponseType>('profile', profile)\r\n            .then(res => res.data);\r\n    }\r\n}\r\n","import {v1} from \"uuid\";\r\nimport {ProfileType} from \"../components/profile/profileInfo/profileInfo\";\r\nimport {AppRootState} from \"./redux-store\";\r\nimport {SWActionType, ThunkType} from \"./users-reducer\";\r\nimport {ThunkDispatch} from \"redux-thunk\";\r\nimport {ProfileDataFormType} from \"../components/profile/profileInfo/ProfileDataForm/ProfileDataForm\";\r\nimport {stopSubmit} from \"redux-form\";\r\nimport {ObjPostType} from \"../types/types\";\r\nimport {profileApi} from \"../api/profile-api\";\r\n\r\nconst ADD_POST = 'profile/ADD-POST';\r\nconst DELETE_POST = 'profile/DELETE-POST';\r\nconst SET_USER_PROFILE = 'profile/SET-USER-PROFILE';\r\nconst SET_USER_STATUS = 'profile/SET-USER-STATUS';\r\nconst SET_PHOTO_SUCCESS = 'profile/SET-PHOTO-SUCCESS';\r\n\r\n// TS profileReducer\r\nexport type AddPostACType = ReturnType<typeof addPostAC>;\r\nexport type DeletePostACType = ReturnType<typeof deleteAC>;\r\nexport type SetUserProfileType = ReturnType<typeof setUserProfile>;\r\nexport type SetUserStatusType = ReturnType<typeof setUserStatus>;\r\nexport type SavePhotoSuccessType = ReturnType<typeof savePhotoSuccess>;\r\n\r\nexport type profileReducerType =\r\n    AddPostACType\r\n    | SetUserProfileType\r\n    | SetUserStatusType\r\n    | DeletePostACType\r\n    | SavePhotoSuccessType;\r\n\r\nexport type ProfileReducerInitialStateType = {\r\n    posts: Array<ObjPostType>;\r\n    profile: ProfileType | null;\r\n    status: string;\r\n}\r\n\r\nlet InitialState: ProfileReducerInitialStateType = {\r\n    posts: [\r\n        {id: v1(), message: 'Hello, What are you doing?', likeCount: '5'},\r\n        {id: v1(), message: 'Hi, I am learning TypeScript now.', likeCount: '13'},\r\n    ],\r\n    profile: null,\r\n    status: ''\r\n}\r\n\r\nconst profileReducer = (state: ProfileReducerInitialStateType = InitialState, action: profileReducerType): ProfileReducerInitialStateType => {\r\n    switch (action.type) {\r\n        case ADD_POST :\r\n            let stateCopy = {\r\n                ...state,\r\n                posts: [...state.posts]\r\n            }\r\n            const newPost: ObjPostType = {\r\n                id: v1(),\r\n                message: action.value,\r\n                likeCount: \"0\"\r\n            }\r\n            stateCopy.posts.push(newPost);\r\n            return stateCopy;\r\n        case DELETE_POST:\r\n            return {\r\n                ...state,\r\n                posts: state.posts.filter(p => p.id !== action.postId)\r\n            }\r\n        case SET_USER_PROFILE:\r\n            return {\r\n                ...state,\r\n                profile: action.profile\r\n            }\r\n        case SET_USER_STATUS:\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            }\r\n        case SET_PHOTO_SUCCESS:\r\n            return {\r\n                ...state,\r\n                profile: action.profile\r\n            }\r\n\r\n        default :\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const addPostAC = (value: string) => {\r\n    return {\r\n        type: ADD_POST,\r\n        value\r\n    } as const;\r\n}\r\nexport const deleteAC = (postId: string) => {\r\n    return {\r\n        type: DELETE_POST,\r\n        postId\r\n    } as const;\r\n}\r\nexport const setUserProfile = (profile: ProfileType) => {\r\n    return {\r\n        type: SET_USER_PROFILE,\r\n        profile\r\n    } as const;\r\n}\r\nexport const setUserStatus = (status: string) => {\r\n    return {\r\n        type: SET_USER_STATUS,\r\n        status\r\n    } as const;\r\n}\r\nexport const savePhotoSuccess = (profile: ProfileType) => {\r\n    return {\r\n        type: SET_PHOTO_SUCCESS,\r\n        profile\r\n    } as const;\r\n}\r\n\r\n//thunk\r\nexport const getUserProfile = (userId: string): ThunkType => async (dispatch: ThunkDispatch<AppRootState, unknown, SWActionType>) => {\r\n    const res = await profileApi.getUserProfileById(userId);\r\n    dispatch(setUserProfile(res));\r\n}\r\nexport const getUserStatus = (userID: string): ThunkType => {\r\n    return async (dispatch: ThunkDispatch<AppRootState, unknown, SWActionType>) => {\r\n        const resp = await profileApi.getStatus(userID);\r\n        dispatch(setUserStatus(resp));\r\n    }\r\n}\r\nexport const updateUserStatus = (status: string): ThunkType => {\r\n    return async (dispatch: ThunkDispatch<AppRootState, unknown, SWActionType>) => {\r\n        try {\r\n            const resp = await profileApi.updateStatus(status);\r\n            if (resp.resultCode === 0) {\r\n                dispatch(setUserStatus(status));\r\n            }\r\n        } catch (error) {\r\n            debugger\r\n            console.log(error)\r\n        }\r\n    }\r\n}\r\nexport const savePhoto = (file: any): ThunkType => {\r\n    return async (dispatch: ThunkDispatch<AppRootState, unknown, SWActionType>, getState: () => AppRootState) => {\r\n        try {\r\n            const resp = await profileApi.savePhoto(file);\r\n            if (resp.resultCode === 0) {\r\n                const profile = getState().profilePage.profile\r\n                profile && dispatch(savePhotoSuccess({...profile, photos: resp.data.photos}));\r\n            }\r\n        } catch (e) {\r\n            console.log(e.name);\r\n        }\r\n    }\r\n}\r\nexport const saveProfile = (profile: ProfileDataFormType): ThunkType => {\r\n    return async (dispatch: ThunkDispatch<AppRootState, unknown, SWActionType>, getState: () => AppRootState) => {\r\n        const userId = String(getState().auth.id);\r\n        try {\r\n            const resp = await profileApi.saveProfile(profile);\r\n            if (resp.resultCode === 0) {\r\n                dispatch(getUserProfile(userId));\r\n            } else {\r\n                dispatch(stopSubmit('edit-profile', {_error: resp.messages[0]}));\r\n                return Promise.reject(resp.messages[0]);\r\n            }\r\n        } catch (e) {\r\n            console.log(e.name);\r\n        }\r\n    }\r\n}\r\n\r\nexport default profileReducer;\r\n","module.exports = __webpack_public_path__ + \"static/media/green.97a73095.png\";","import axios from \"axios\";\r\n\r\nexport const instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    headers: {\r\n        \"api-key\": \"d957613d-94bb-4388-aef0-47e775e83ac5\"\r\n\r\n    }\r\n})\r\n\r\n\r\nexport enum ResultCodeEnum {\r\n    Success = 0,\r\n    Error = 1,\r\n}\r\n\r\nexport enum ResultCodeForCaptchaEnum {\r\n    CaptchaIsRequired = 10\r\n}\r\n\r\nexport type APIResponseType<D = {}, RC = ResultCodeEnum> = {\r\n    data: D\r\n    messages: Array<string>;\r\n    resultCode: RC\r\n}\r\n","import {v1} from \"uuid\";\r\nimport {DialogItemType} from \"../components/dialogs/dialogItem/dialogItem\";\r\nimport {MessagesType} from \"./redux-store\";\r\n\r\nconst ADD_MESSAGE = 'dialogs/ADD-MESSAGE';\r\n\r\nexport type addMessACType = ReturnType<typeof addMessAC>;\r\n\r\nexport type dialogsReducerAC = addMessACType ;\r\n\r\n// export type DialogsReducerInitialStateType = {\r\n//     dialogs: Array<DialogItemType>;\r\n//     messages: Array<MessagesType>;\r\n// }\r\n\r\n\r\nlet initialState = {\r\n    dialogs: [\r\n        {\r\n            id: v1(),\r\n            name: \"Alex\",\r\n            url: \"https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcSvTQmV6oI5wUAiXdI6JjvFjPAUm7iq2AeNR45ffjomO1zLtmik&usqp=CAU\"\r\n        },\r\n        {\r\n            id: v1(),\r\n            name: \"Gor\",\r\n            url: \"https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcTT1zZkQjtBjyYp5uq1qhmdpmoRkTFws1hL54z8U40EQv08o06Q&usqp=CAU\"\r\n        },\r\n        {\r\n            id: v1(),\r\n            name: \"Jora\",\r\n            url: \"https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcTK9DkWY2BgUcJMNZXyAz6Cpmiq-AhC098wtOnBL-3foioVeyaI&usqp=CAU\"\r\n        },\r\n        {\r\n            id: v1(),\r\n            name: \"Anyfriy\",\r\n            url: \"https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcQqX1EK98tD5uSgn72MKv-2pEhDAPiiiIgXH7LMYAe982_CtbRN&usqp=CAU\"\r\n        },\r\n        {\r\n            id: v1(),\r\n            name: \"Sveta\",\r\n            url: \"https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcQb0QBmlGsym_SIuH6d-OrApu0iX0j8K4bxOufsI9D9GeKv7h1i&usqp=CAU\"\r\n        },\r\n        {\r\n            id: v1(),\r\n            name: \"ergey\",\r\n            url: \"https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcS_yhvGXHtP8leB8fhWCAOke-8h5gRG1Wxo6fS814OFjX_g1qOl&usqp=CAU\"\r\n        }\r\n    ] as Array<DialogItemType>,\r\n    messages: [\r\n        {id: v1(), message: 'E-ho-ho'},\r\n        {id: v1(), message: 'And the bottle of rum'},\r\n        {id: v1(), message: 'Yes!'}\r\n    ] as Array<MessagesType>,\r\n}\r\n\r\nexport type DialogsReducerInitialStateType = typeof initialState;\r\n\r\nconst dialogsReducer = (state: DialogsReducerInitialStateType = initialState, action: dialogsReducerAC):DialogsReducerInitialStateType => {\r\n    switch (action.type) {\r\n        case ADD_MESSAGE :\r\n            let newMess = {\r\n                id:v1(),\r\n                message: action.value\r\n            }\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages, newMess]\r\n            }\r\n        default :\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const addMessAC = (value: string) => {\r\n    return {\r\n        type: ADD_MESSAGE,\r\n        value\r\n    } as const;\r\n}\r\n\r\nexport default dialogsReducer;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"news_dialogs__1Dv6-\"};","module.exports = __webpack_public_path__ + \"static/media/oval.9e9dc538.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"selectedPage\":\"Paginator_selectedPage__3HUGP\"};","import React from 'react';\r\nimport  style from './news.module.css';\r\n\r\nconst News = () => {\r\n    return (\r\n        <div className={style.music}>\r\n            News\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default  News;","import React from 'react';\r\nimport  style from './music.module.css';\r\n\r\nconst Music = () => {\r\n    return (\r\n        <div className={style.music}>\r\n            Music\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default  Music;","import React from 'react';\r\nimport  style from './settings.module.css';\r\n\r\nconst Settings = () => {\r\n    return (\r\n        <div className={style.settings}>\r\n            Settings\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default  Settings;","import React from \"react\";\r\nimport style from \"./Paginator.module.css\";\r\n\r\ntype PaginatorPropsType = {\r\n    pageSize: number;\r\n    totalItemsCount: number;\r\n    currentPage: number;\r\n    changedPage: (pageNumber: number) => void;\r\n    portionSize: number;\r\n    portionNumber: number;\r\n    setPortionNumber: (portionNum: number) => void;\r\n}\r\nconst Paginator: React.FC<PaginatorPropsType> = (props) => {\r\n\r\n    let pageCount = Math.ceil(props.totalItemsCount / props.pageSize);\r\n    let pages = [];\r\n    for (let i = 1; i <= pageCount; i++) {\r\n        pages.push(i);\r\n    }\r\n\r\n    const portionCount = Math.ceil(pageCount / props.portionSize);\r\n    // const [portionNumber, setPortionNumber] = useState<number>(1);\r\n    const leftPortionPageNumber = (props.portionNumber - 1) * props.portionSize + 1;\r\n    const rightPortionPageNumber = props.portionNumber * props.portionSize;\r\n\r\n\r\n    return (\r\n        <div>\r\n            {props.portionNumber > 1 && <button onClick={() => {\r\n                props.setPortionNumber(props.portionNumber - 1)\r\n            }}>назад</button>}\r\n            {\r\n                pages\r\n                    .filter(p => p >= leftPortionPageNumber && p <= rightPortionPageNumber)\r\n                    .map(p => <span key={p}\r\n                                    className={props.currentPage === p ? style.selectedPage : ''}\r\n                                    onClick={(e) => {\r\n                                        props.changedPage(p);\r\n                                    }}>{p}\r\n                        </span>)\r\n            }\r\n            {\r\n                portionCount > props.portionNumber &&\r\n\t\t\t\t<button onClick={() => {\r\n                    props.setPortionNumber(props.portionNumber + 1)\r\n                }}>вперед</button>\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Paginator;","import React from \"react\";\r\nimport userPhoto from '../../assets/images/green.png'\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\n\r\nexport type UsersPropsType = {\r\n    user: any;\r\n    follow: (userId: string) => void;\r\n    unfollow: (userId: string) => void;\r\n\r\n}\r\nconst User = (props: UsersPropsType) => {\r\n    const {user, unfollow, follow} = props;\r\n    return (\r\n        <div>\r\n            <div>\r\n                <div>\r\n                    <NavLink to={'/profile/' + user.id}>\r\n                        <img src={user.photos.small !== null ? user.photos.small : userPhoto}\r\n                             alt=\"user-avatar\" width={100} height={100}/>\r\n                    </NavLink>\r\n                </div>\r\n                {user.followed\r\n                    ? <button onClick={() => {\r\n                        unfollow(user.id)\r\n                    }}>unfollow</button>\r\n                    : <button onClick={() => {\r\n                        follow(user.id)\r\n                    }}>follow</button>}\r\n            </div>\r\n            <div>\r\n                <div>\r\n                    <span>{user.name}</span>\r\n                    <span>{user.status}</span>\r\n                </div>\r\n                <div>\r\n                    <span>{'user.location.country'}</span>\r\n                    <span>{'user.location.city'}</span>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default User;","import React from \"react\";\r\nimport Preloader from \"../../assets/preloader/Preloader\";\r\nimport Paginator from \"../common/Paginator/Paginator\";\r\nimport User from \"./User\";\r\nimport {UserType} from \"../../types/types\";\r\n\r\n\r\nexport type UsersAPIComponentPropsType = {\r\n    users: Array<UserType>;\r\n    followSuccess: (userId: string) => void;\r\n    unFollowSuccess: (userId: string) => void;\r\n    // setUsers: (users: Array<UserType>) => void;\r\n    pageSize: number;\r\n    totalUsersCount: number;\r\n    currentPage: number;\r\n    setCurrentPage: (currentPage: number) => void;\r\n    setUsersTotalCount: (totalCount: number) => void;\r\n    isFetching: boolean;\r\n    // toggleIsFetching: (isFetching: boolean) => void;\r\n    followingInProgress: Array<string>;\r\n    // toggleFollowingInProgress: (isFetching: boolean, userId: string) => void;\r\n    getUsers: (currentPage: number, pageSize: number) => void;\r\n    follow: (userId: string) => void;\r\n    unfollow: (userId: string) => void;\r\n}\r\n\r\nclass UsersAPIComponent extends React.Component<UsersAPIComponentPropsType> {\r\n    state = {\r\n        portionNumber: 1\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.getUsers(this.props.currentPage, this.props.pageSize);\r\n    }\r\n\r\n    changedPage = (pageNumber: number) => {\r\n        this.props.getUsers(pageNumber, this.props.pageSize);\r\n    }\r\n\r\n    setPortionNumber = (portionNum: number) => {\r\n        this.setState({\r\n            portionNumber: portionNum\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return <>\r\n            {this.props.isFetching\r\n                ? <Preloader/>\r\n                : <Users changedPage={this.changedPage}\r\n                         currentPage={this.props.currentPage}\r\n                         followSuccess={this.props.followSuccess}\r\n                         unFollowSuccess={this.props.unFollowSuccess}\r\n                         pageSize={this.props.pageSize}\r\n                         usersPage={this.props.users}\r\n                         totalUsersCount={this.props.totalUsersCount}\r\n                         followingInProgress={this.props.followingInProgress}\r\n                         follow={this.props.follow}\r\n                         unfollow={this.props.unfollow}\r\n                         portionNumber={this.state.portionNumber}\r\n                         setPortionNumber={this.setPortionNumber}\r\n\r\n                />}\r\n        </>\r\n    }\r\n}\r\n\r\nexport default UsersAPIComponent;\r\n\r\nexport type UsersPropsType = {\r\n    usersPage: Array<UserType>;\r\n    followSuccess: (userId: string) => void;\r\n    unFollowSuccess: (userId: string) => void;\r\n    pageSize: number;\r\n    totalUsersCount: number;\r\n    currentPage: number;\r\n    changedPage: (pageNumber: number) => void;\r\n    followingInProgress: Array<string>;\r\n    follow: (userId: string) => void;\r\n    unfollow: (userId: string) => void;\r\n    portionNumber: number;\r\n    setPortionNumber: (portionNum: number) => void;\r\n}\r\n\r\nconst Users = (props: UsersPropsType) => {\r\n    const {pageSize, totalUsersCount, currentPage, changedPage, portionNumber, setPortionNumber} = props;\r\n    return (\r\n        <div>\r\n            <Paginator portionNumber={portionNumber} pageSize={pageSize} totalItemsCount={totalUsersCount}\r\n                       currentPage={currentPage}\r\n                       changedPage={changedPage} portionSize={10} setPortionNumber={setPortionNumber}/>\r\n            {\r\n                props.usersPage.map(user => {\r\n                    const unFollowHandler = () => {\r\n                        props.unfollow(user.id);\r\n                    }\r\n                    const followHandler = () => {\r\n                        props.follow(user.id);\r\n                    }\r\n                    return (\r\n                        <User user={user} follow={followHandler} unfollow={unFollowHandler} key={user.id}/>\r\n                    );\r\n                })\r\n            }\r\n        </div>\r\n    );\r\n}","export const updateObjectInArray = (items:any,itemId:string, itemProps:string, newObjProps:any) => {\r\n    return  items.map((user:any)=> {\r\n    if (user[itemProps] === itemId) {\r\n            return {...user, ...newObjProps}\r\n        }\r\n        return user;\r\n    })\r\n}","import {instance} from \"./api\";\r\nimport {UserType} from \"../types/types\";\r\n\r\nexport type GetUsersRespType = {\r\n    items: Array<UserType>;\r\n    totalCount: number;\r\n    error: string;\r\n}\r\n\r\nexport const userApi = {\r\n    getUsers(currentPage: number = 1, pageSize: number = 10) {\r\n        return instance.get<GetUsersRespType>(`users?page=${currentPage}&count=${pageSize}`)\r\n            .then(response => response.data);\r\n    },\r\n    follow(id: string) {\r\n        return instance.post<ResponseType>(`follow/${id}`, {})\r\n            .then(response => response.data);\r\n    },\r\n    unFollow(id: string) {\r\n        return instance.delete<ResponseType>(`follow/${id}`)\r\n            .then(response => response.data);\r\n    },\r\n}\r\n","import {AppRootState, InferActionsType} from \"./redux-store\";\r\nimport {ThunkAction, ThunkDispatch} from \"redux-thunk\";\r\nimport {AuthReducerType} from \"./auth-reducer\";\r\nimport {dialogsReducerAC} from \"./dialogs-reducer\";\r\nimport {NavbarReducerAC} from \"./navbar-reducer\";\r\nimport {profileReducerType} from \"./profile-reducer\";\r\nimport {AppReducerType} from \"./app-reducer\";\r\nimport {updateObjectInArray} from \"../utils/object-helpers\";\r\nimport {UserType} from \"../types/types\";\r\nimport {userApi} from \"../api/users-api\";\r\n\r\nconst FOLLOW = 'FOLLOW';\r\nconst UNFOLLOW = 'UNFOLLOW';\r\nconst SET_USERS = 'SET-USERS';\r\nconst SET_CURRENT_PAGE = 'SET-CURRENT-PAGE';\r\nconst SET_TOTAL_COUNT = 'SET-TOTAL-COUNT';\r\nconst TOGGLE_IS_FETCHING = 'TOGGLE-IS-FETCHING';\r\nconst TOGGLE_FOLLOWING_IN_PROGRESS = 'TOGGLE-FOLLOWING-IN-PROGRESS';\r\n\r\n// export type UserType = {\r\n//     id: string;\r\n//     userUrl: string;\r\n//     photos: {\r\n//         small: string | null;\r\n//         large: string | null;\r\n//     }\r\n//     followed: boolean;\r\n//     name: string;\r\n//     status: string;\r\n//     location: {\r\n//         country: string;\r\n//         city: string;\r\n//     }\r\n// }\r\n// export type UsersReducerInitialStateType = {\r\n//     users: Array<UserType>;\r\n//     pageSize: number;\r\n//     totalUsersCount: number;\r\n//     currentPage: number;\r\n//     isFetching: boolean;\r\n//     followingInProgress: Array<string>;\r\n// }\r\n\r\n\r\n// export type FollowACType = ReturnType<typeof followSuccess>;\r\n// export type UnFollowACType = ReturnType<typeof unFollowSuccess>;\r\n// export type SetUsersACType = ReturnType<typeof setUsers>;\r\n// export type SetCurrentPageACType = ReturnType<typeof setCurrentPage>;\r\n// export type SetUsersTotalCountACType = ReturnType<typeof setUsersTotalCount>;\r\n// export type ToggleIsFetchingACType = ReturnType<typeof toggleIsFetching>;\r\n// export type toggleFollowingInProgressACType = ReturnType<typeof toggleFollowingInProgress>;\r\n\r\nexport type UsersReducerAC = InferActionsType<typeof actions>;\r\n// FollowACType\r\n// | UnFollowACType\r\n// | SetUsersACType\r\n// | SetCurrentPageACType\r\n// | SetUsersTotalCountACType | ToggleIsFetchingACType | toggleFollowingInProgressACType;\r\n\r\nexport type SWActionType =\r\n    AuthReducerType\r\n    | dialogsReducerAC\r\n    | NavbarReducerAC\r\n    | profileReducerType\r\n    | UsersReducerAC\r\n    | AppReducerType;\r\n\r\nlet initialState = {\r\n    users: [] as Array<UserType>,\r\n    pageSize: 10,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isFetching: true,\r\n    followingInProgress: [] as Array<string>\r\n}\r\n\r\nexport type   UsersReducerInitialStateType = typeof initialState;\r\n\r\nconst usersReducer = (state: UsersReducerInitialStateType = initialState, action: UsersReducerAC): UsersReducerInitialStateType => {\r\n    switch (action.type) {\r\n        case FOLLOW:\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.userId, 'id', {followed: true})\r\n            }\r\n        case UNFOLLOW:\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.userId, 'id', {followed: false})\r\n            }\r\n        case SET_USERS :\r\n            return {\r\n                ...state,\r\n                users: action.users\r\n            }\r\n        case SET_CURRENT_PAGE :\r\n            return {\r\n                ...state,\r\n                currentPage: action.currentPage\r\n            }\r\n        case SET_TOTAL_COUNT :\r\n            return {\r\n                ...state,\r\n                totalUsersCount: action.totalCount\r\n            }\r\n        case TOGGLE_IS_FETCHING :\r\n            return {\r\n                ...state,\r\n                isFetching: action.isFetching\r\n            }\r\n        case TOGGLE_FOLLOWING_IN_PROGRESS:\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.isFetching\r\n                    ? [...state.followingInProgress, action.userId]\r\n                    : state.followingInProgress.filter(id => id !== action.userId)\r\n            }\r\n        default :\r\n            return state\r\n    }\r\n}\r\nexport const actions = {\r\n    followSuccess: (userId: string) => {\r\n        return {\r\n            type: FOLLOW,\r\n            userId\r\n        } as const;\r\n    },\r\n    unFollowSuccess: (userId: string) => {\r\n        return {\r\n            type: UNFOLLOW,\r\n            userId\r\n        } as const;\r\n    },\r\n    setUsers: (users: Array<UserType>) => {\r\n        return {\r\n            type: SET_USERS,\r\n            users\r\n        } as const;\r\n    },\r\n    setCurrentPage: (currentPage: number) => {\r\n        return {\r\n            type: SET_CURRENT_PAGE,\r\n            currentPage\r\n        } as const;\r\n    },\r\n    setUsersTotalCount: (totalCount: number) => {\r\n        return {\r\n            type: SET_TOTAL_COUNT,\r\n            totalCount\r\n        } as const;\r\n    },\r\n    toggleIsFetching: (isFetching: boolean) => {\r\n        return {\r\n            type: TOGGLE_IS_FETCHING,\r\n            isFetching\r\n        } as const;\r\n    },\r\n    toggleFollowingInProgress: (isFetching: boolean, userId: string) => {\r\n        return {\r\n            type: TOGGLE_FOLLOWING_IN_PROGRESS,\r\n            isFetching,\r\n            userId\r\n        } as const;\r\n    }\r\n}\r\n\r\n/*\r\nexport const followSuccess = (userId: string) => {\r\n    return {\r\n        type: FOLLOW,\r\n        userId\r\n    } as const;\r\n}\r\nexport const unFollowSuccess = (userId: string) => {\r\n    return {\r\n        type: UNFOLLOW,\r\n        userId\r\n    } as const;\r\n}\r\nexport const setUsers = (users: Array<UserType>) => {\r\n    return {\r\n        type: SET_USERS,\r\n        users\r\n    } as const;\r\n}\r\nexport const setCurrentPage = (currentPage: number) => {\r\n    return {\r\n        type: SET_CURRENT_PAGE,\r\n        currentPage\r\n    } as const;\r\n}\r\nexport const setUsersTotalCount = (totalCount: number) => {\r\n    return {\r\n        type: SET_TOTAL_COUNT,\r\n        totalCount\r\n    } as const;\r\n}\r\nexport const toggleIsFetching = (isFetching: boolean) => {\r\n    return {\r\n        type: TOGGLE_IS_FETCHING,\r\n        isFetching\r\n    } as const;\r\n}\r\nexport const toggleFollowingInProgress = (isFetching: boolean, userId: string) => {\r\n    return {\r\n        type: TOGGLE_FOLLOWING_IN_PROGRESS,\r\n        isFetching,\r\n        userId\r\n    } as const;\r\n}*/\r\n\r\n\r\nexport type ThunkType = ThunkAction<void, AppRootState, unknown, SWActionType>;\r\n\r\nexport const requestUsers = (requestPage: number, pageSize: number): ThunkType => {\r\n    return async (dispatch: ThunkDispatch<AppRootState, unknown, SWActionType>) => {\r\n        dispatch(actions.toggleIsFetching(true));\r\n        dispatch(actions.setCurrentPage(requestPage));\r\n\r\n        const data = await userApi.getUsers(requestPage, pageSize);\r\n        dispatch(actions.toggleIsFetching(false));\r\n        dispatch(actions.setUsers(data.items));\r\n        dispatch(actions.setUsersTotalCount(data.totalCount));\r\n    }\r\n}\r\nconst followUnfollowFlow = async (dispatch: ThunkDispatch<AppRootState, unknown, SWActionType>, userId: string, apiMethod: any, actionCreator: any) => {\r\n\r\n    dispatch(actions.toggleFollowingInProgress(true, userId));\r\n    const data = await apiMethod(userId);\r\n    dispatch(actions.toggleFollowingInProgress(false, userId));\r\n    if (data.resultCode === 0) {\r\n        dispatch(actionCreator(userId));\r\n    }\r\n}\r\nexport const follow = (userId: string): ThunkType => {\r\n    return async (dispatch: ThunkDispatch<AppRootState, unknown, SWActionType>) => {\r\n        let apiMethod = userApi.follow.bind(userApi);\r\n        followUnfollowFlow(dispatch, userId, apiMethod, actions.followSuccess);\r\n    }\r\n}\r\nexport const unfollow = (userId: string): ThunkType => {\r\n    return async (dispatch: ThunkDispatch<AppRootState, unknown, SWActionType>) => {\r\n        let apiMethod = userApi.unFollow.bind(userApi);\r\n        followUnfollowFlow(dispatch, userId, apiMethod, actions.unFollowSuccess);\r\n    }\r\n}\r\n\r\nexport default usersReducer;\r\n","import {AppRootState} from \"./redux-store\";\r\nimport {createSelector} from 'reselect'\r\n\r\nexport const getIsFetching = (state: AppRootState) => {\r\n    return state.usersPage.isFetching;\r\n}\r\nexport const getUsersSelector = (state: AppRootState) => {\r\n    return state.usersPage.users;\r\n}\r\n// export const getUsersSelectorTest = (state: AppRootState) => {\r\n//     return getUsersSelector(state).filter(user => true);\r\n// }\r\nexport const getUsers = createSelector(getUsersSelector,getIsFetching, (users, isFetching) => {\r\n    return users.filter(user => true);\r\n});\r\n\r\nexport const getPageSize = (state: AppRootState) => {\r\n    return state.usersPage.pageSize;\r\n}\r\nexport const getTotalUsersCount = (state: AppRootState) => {\r\n    return state.usersPage.totalUsersCount;\r\n}\r\nexport const getCurrentPage = (state: AppRootState) => {\r\n    return state.usersPage.currentPage;\r\n}\r\nexport const getFollowingInProgress = (state: AppRootState) => {\r\n    return state.usersPage.followingInProgress;\r\n}\r\n","import {connect} from \"react-redux\";\r\nimport UsersAPIComponent from \"./UsersClass\";\r\nimport {AppRootState} from \"../../redux/redux-store\";\r\nimport {\r\n    follow,\r\n    requestUsers,\r\n    unfollow,\r\n    actions,\r\n    UsersReducerInitialStateType\r\n} from \"../../redux/users-reducer\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {\r\n    getCurrentPage,\r\n    getFollowingInProgress,\r\n    getIsFetching,\r\n    getPageSize,\r\n    getTotalUsersCount,\r\n    getUsers\r\n} from \"../../redux/users-selectors\";\r\n\r\ntype MapStateToPropsType = UsersReducerInitialStateType;\r\ntype MapDispatchToPropsType = {\r\n    followSuccess: (userId: string) => void;\r\n    unFollowSuccess: (userId: string) => void;\r\n    // setUsers: (users: Array<UserType>) => void;\r\n    setCurrentPage: (currentPage: number) => void;\r\n    setUsersTotalCount: (totalCount: number) => void;\r\n    // toggleIsFetching: (isFetching: boolean) => void;\r\n    toggleFollowingInProgress: (isFetching: boolean, userId: string) => void;\r\n    getUsers: (currentPage: number, pageSize: number) => void;\r\n    follow: (userId: string) => void;\r\n    unfollow: (userId: string) => void;\r\n}\r\n\r\n// let mapStateToProps = (state: AppRootState): MapStateToPropsType => {\r\n//     return {\r\n//         users: state.usersPage.users,\r\n//         pageSize: state.usersPage.pageSize,\r\n//         totalUsersCount: state.usersPage.totalUsersCount,\r\n//         currentPage: state.usersPage.currentPage,\r\n//         isFetching: state.usersPage.isFetching,\r\n//         followingInProgress: state.usersPage.followingInProgress\r\n//     }\r\n// }\r\n\r\n//with selectors\r\nlet mapStateToProps = (state: AppRootState): MapStateToPropsType => {\r\n    return {\r\n        users: getUsers(state),\r\n        pageSize: getPageSize(state),\r\n        totalUsersCount: getTotalUsersCount(state),\r\n        currentPage: getCurrentPage(state),\r\n        isFetching: getIsFetching(state),\r\n        followingInProgress: getFollowingInProgress(state)\r\n    }\r\n}\r\n\r\n\r\nexport default withAuthRedirect(connect<MapStateToPropsType, MapDispatchToPropsType, {}, AppRootState>(mapStateToProps, {\r\n    followSuccess: actions.followSuccess,\r\n    unFollowSuccess: actions.unFollowSuccess,\r\n    setCurrentPage: actions.setCurrentPage,\r\n    setUsersTotalCount: actions.setUsersTotalCount,\r\n    toggleFollowingInProgress:actions.toggleFollowingInProgress,\r\n    getUsers: requestUsers,\r\n    follow,\r\n    unfollow\r\n})(UsersAPIComponent));\r\n","import {instance, APIResponseType, ResultCodeEnum, ResultCodeForCaptchaEnum} from \"./api\";\r\n\r\ntype LoginRespDataType = {\r\n    userId: number;\r\n}\r\ntype MeRespDataType = {\r\n    id: number\r\n    email: string\r\n    login: string\r\n}\r\nexport const authApi = {\r\n    authMe() {\r\n        return instance.get<APIResponseType<MeRespDataType>>('auth/me').then(res => res.data);\r\n    },\r\n    login(email: string, password: string, rememberMe: boolean, captcha: string | null = null) {\r\n        return instance.post<APIResponseType<LoginRespDataType, ResultCodeEnum | ResultCodeForCaptchaEnum>>('auth/login', {\r\n            email,\r\n            password,\r\n            rememberMe,\r\n            captcha\r\n        })\r\n            .then(res => res.data);\r\n    },\r\n    logout() {\r\n        return instance.delete<APIResponseType>('auth/login')\r\n            .then(res => res.data);\r\n    }\r\n}\r\n","import {instance} from \"./api\";\r\n\r\nexport const securityApi = {\r\n    getCaptcha() {\r\n        return instance.get<{ url: string }>('security/get-captcha-url').then(res => res.data)\r\n    },\r\n}\r\n","import {SWActionType, ThunkType} from \"./users-reducer\";\r\nimport {ResultCodeEnum, ResultCodeForCaptchaEnum} from \"../api/api\";\r\nimport {ThunkDispatch} from \"redux-thunk\";\r\nimport {AppRootState} from \"./redux-store\";\r\nimport {stopSubmit} from \"redux-form\";\r\nimport {authApi} from \"../api/auth-api\";\r\nimport {securityApi} from \"../api/security-api\";\r\n\r\nconst SET_USER_DATA = 'auth/SET-USER-DATA';\r\nconst SET_AUTH_USER = 'auth/SET-AUTH-USER';\r\nconst GET_CAPTCHA_URL = 'auth/GET-CAPTCHA-URL';\r\n\r\nexport type AuthReducerTypeInitialStateType = {\r\n    id: null | number,\r\n    email: null | string,\r\n    login: null | string,\r\n    isAuth: boolean,\r\n    authUser: AuthUserType | null,\r\n    captchaUrl: string | null\r\n}\r\n\r\nexport type AuthUserType = {\r\n    aboutMe: string,\r\n    contacts: {\r\n        [key: string]: string\r\n    },\r\n    lookingForAJob: boolean,\r\n    lookingForAJobDescription: string,\r\n    fullName: string,\r\n    userId: number,\r\n    photos: {\r\n        small: string,\r\n        large: string\r\n    }\r\n}\r\n\r\nlet initialState = {\r\n    id: null,\r\n    email: null,\r\n    login: null,\r\n    isAuth: false,\r\n    authUser: null,\r\n    captchaUrl: null\r\n}\r\n\r\ntype SetUserDataACType = ReturnType<typeof setAuthUserData>;\r\ntype SetAuthUserACType = ReturnType<typeof setAuthUser>;\r\ntype GetCaptchaUrlACType = ReturnType<typeof getCaptchaUrl>;\r\n\r\n\r\nexport type AuthReducerType = SetUserDataACType | SetAuthUserACType | GetCaptchaUrlACType;\r\n\r\nconst authReducer = (state: AuthReducerTypeInitialStateType = initialState, action: AuthReducerType): AuthReducerTypeInitialStateType => {\r\n    switch (action.type) {\r\n        case SET_USER_DATA:\r\n        case GET_CAPTCHA_URL : {\r\n            return {\r\n                ...state,\r\n                ...action.payload\r\n            }\r\n        }\r\n        case SET_AUTH_USER:\r\n            return {\r\n                ...state,\r\n                authUser: action.authUser\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default authReducer;\r\n\r\n//actions\r\nexport const setAuthUserData = (id: number | null, email: string | null, login: string | null, isAuth: boolean) => {\r\n    return {\r\n        type: SET_USER_DATA,\r\n        payload: {\r\n            id,\r\n            email,\r\n            login,\r\n            isAuth\r\n        }\r\n    } as const;\r\n}\r\nexport const setAuthUser = (authUser: AuthUserType) => {\r\n    return {\r\n        type: SET_AUTH_USER,\r\n        authUser\r\n    } as const;\r\n}\r\nexport const getCaptchaUrl = (captchaUrl: string) => {\r\n    return {\r\n        type: GET_CAPTCHA_URL,\r\n        payload: {captchaUrl}\r\n    } as const;\r\n}\r\n\r\n//thunk\r\nexport const authMe = (): ThunkType => {\r\n    return async (dispatch: ThunkDispatch<AppRootState, unknown, SWActionType>) => {\r\n        const meData = await authApi.authMe();\r\n\r\n        if (meData.resultCode === ResultCodeEnum.Success) {\r\n            let {id, email, login} = meData.data;\r\n            dispatch(setAuthUserData(id, email, login, true));\r\n            // const userRes = await userApi.getUserProfileById(id);\r\n            // dispatch(setAuthUser(userRes.data));\r\n        }\r\n    }\r\n}\r\nexport const login = (email: string, password: string, rememberMe: boolean, captcha: string | null): ThunkType => {\r\n    return async (dispatch: ThunkDispatch<AppRootState, unknown, SWActionType>) => {\r\n        const data = await authApi.login(email, password, rememberMe, captcha);\r\n\r\n        if (data.resultCode === ResultCodeEnum.Success) {\r\n            dispatch(authMe());\r\n        } else {\r\n            if (data.resultCode === ResultCodeForCaptchaEnum.CaptchaIsRequired) {\r\n                dispatch(getCaptcha());\r\n            }\r\n            const message = data.messages.length > 0 ? data.messages[0] : 'some error occurred';\r\n            // @ts-ignore\r\n            dispatch(stopSubmit('login', {_error: message}));\r\n        }\r\n\r\n    }\r\n}\r\nexport const logout = (): ThunkType => {\r\n    return async (dispatch: ThunkDispatch<AppRootState, unknown, SWActionType>) => {\r\n        const data = await authApi.logout();\r\n\r\n        if (data.resultCode === ResultCodeEnum.Success) {\r\n            dispatch(setAuthUserData(null, null, null, false));\r\n        }\r\n    }\r\n}\r\n\r\nexport const getCaptcha = (): ThunkType => {\r\n    return async (dispatch: ThunkDispatch<AppRootState, unknown, SWActionType>) => {\r\n        try {\r\n            const res = await securityApi.getCaptcha();\r\n            dispatch(getCaptchaUrl(res.url));\r\n        } catch (e) {\r\n            console.log(e.name)\r\n        }\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Input} from \"../common/formsControls/FormsControls\";\r\nimport {required} from \"../../utils/validators/validators\";\r\nimport {connect} from \"react-redux\";\r\nimport {login, logout} from \"../../redux/auth-reducer\";\r\nimport {AppRootState} from \"../../redux/redux-store\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport styles from './../common/formsControls/FormsControls.module.css'\r\n\r\nexport type FormDataType = {\r\n    login: string;\r\n    password: string;\r\n    checkbox: boolean;\r\n    captcha: string | null;\r\n}\r\ntype LoginFormPropsType = {\r\n    captchaUrl: string | null;\r\n}\r\nexport const LoginForm: React.FC<LoginFormPropsType & InjectedFormProps<FormDataType, LoginFormPropsType>> = (props) => {\r\n    const {handleSubmit, error, captchaUrl} = props;\r\n    return <form onSubmit={handleSubmit}>\r\n        <div>\r\n            <Field name={'login'} placeholder={'Login'} component={Input}\r\n                   validate={[required]}\r\n            />\r\n        </div>\r\n        <div>\r\n            <Field name={'password'} placeholder={'Password'} type={'password'} component={Input}\r\n                   validate={[required]}/>\r\n        </div>\r\n        <div>\r\n            <Field name={'checkbox'} type=\"checkbox\" component={Input}/>\r\n        </div>\r\n        {captchaUrl && <img src={captchaUrl} alt=\"captcha\"/>}\r\n        {captchaUrl && <Field name={'captcha'} placeholder={'captcha'} component={Input}\r\n\t\t\t\t\t\t\t  validate={[required]}\r\n\t\t/>}\r\n\r\n        {error && <div className={styles.commonErrorField}>\r\n            {error}\r\n\t\t</div>}\r\n        <div>\r\n            <button type={'submit'}>Login</button>\r\n        </div>\r\n    </form>\r\n}\r\n\r\nconst LoginReduxForm = reduxForm<FormDataType, LoginFormPropsType>({form: 'login'})(LoginForm);\r\n\r\ntype MapStateToPropsType = {\r\n    isAuth: boolean;\r\n    captchaUrl: string | null;\r\n}\r\ntype MapDispatchToPropsType = {\r\n    login: (email: string, password: string, rememberMe: boolean, captcha: string | null) => void;\r\n    logout: () => void;\r\n}\r\n\r\ntype LoginPropsType = {\r\n    login: (email: string, password: string, rememberMe: boolean, captcha: string | null) => void;\r\n    isAuth: boolean;\r\n    captchaUrl: string | null;\r\n}\r\n\r\nconst Login = (props: LoginPropsType) => {\r\n    if (props.isAuth) {\r\n        return <Redirect to={'/profile'}/>\r\n    }\r\n    const onSubmit = (formData: FormDataType) => {\r\n        props.login(formData.login, formData.password, formData.checkbox, formData.captcha);\r\n    }\r\n    return <div>\r\n        <h1>Login</h1>\r\n        <LoginReduxForm onSubmit={onSubmit} captchaUrl={props.captchaUrl}\r\n                        initialValues={{login: \"free@samuraijs.com\", password: 'free'}}/>\r\n    </div>\r\n}\r\n\r\nconst mapStateToProps = (state: AppRootState): MapStateToPropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth,\r\n        captchaUrl: state.auth.captchaUrl\r\n    }\r\n}\r\nexport default connect<MapStateToPropsType, MapDispatchToPropsType, {}, AppRootState>(mapStateToProps, {\r\n    login,\r\n    logout\r\n})(Login);\r\n","import {UserType} from \"../types/types\";\r\n\r\nconst SET_USERS = 'SW/FRIENDS/SET-USERS';\r\nconst SET_STATUS = 'SW/FRIENDS/SET-STATUS';\r\n\r\nexport const statuses = {\r\n    NOT_INITIALIZED: 'NOT_INITIALIZED',\r\n    ERROR: 'ERROR',\r\n    INPROGRESS: 'INPROGRESS',\r\n    SUCCESS: 'SUCCESS'\r\n}\r\n\r\nexport type NavbarReducerInitialState = {\r\n    users: Array<UserType>;\r\n    status: string;\r\n}\r\n\r\nlet initialState: NavbarReducerInitialState = {\r\n    users: [],\r\n    status: statuses.NOT_INITIALIZED,\r\n}\r\n\r\ntype setStatusFriendsACType = {\r\n    type: typeof SET_STATUS,\r\n    status: string;\r\n}\r\ntype setUsersFriendsACType = {\r\n    type: typeof SET_USERS,\r\n    users: Array<UserType>;\r\n}\r\n\r\nexport type NavbarReducerAC = setStatusFriendsACType | setUsersFriendsACType;\r\n\r\nconst navbarReducer = (state: NavbarReducerInitialState = initialState, action: NavbarReducerAC): NavbarReducerInitialState => {\r\n\r\n    switch (action.type) {\r\n        case SET_STATUS :\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            }\r\n        case SET_USERS: {\r\n            return {\r\n                ...state,\r\n                users: [...state.users, ...action.users]\r\n            }\r\n        }\r\n        default :\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\nexport const setStatusFriends = (status: string): setStatusFriendsACType => {\r\n    return {\r\n        type: SET_STATUS,\r\n        status\r\n    }\r\n}\r\nexport const setUsersFriends = (users: Array<UserType>): setUsersFriendsACType => {\r\n    return {\r\n        type: SET_USERS,\r\n        users\r\n    }\r\n}\r\n\r\nexport default navbarReducer;","import {SWActionType, ThunkType} from \"./users-reducer\";\r\nimport {ThunkDispatch} from \"redux-thunk\";\r\nimport {AppRootState} from \"./redux-store\";\r\nimport {authMe} from \"./auth-reducer\";\r\n\r\nexport type AppReducerTypeInitialStateType = typeof initialState;\r\n\r\nconst INITIALIZED_SUCCESS = 'APP/SET_INITIALIZED';\r\n\r\nlet initialState = {\r\n    initialized: false\r\n}\r\n\r\nexport type AppReducerType = ReturnType<typeof initializedSuccess>;\r\n\r\nexport const appReducer = (state: AppReducerTypeInitialStateType = initialState, action: AppReducerType): AppReducerTypeInitialStateType => {\r\n    switch (action.type) {\r\n        case INITIALIZED_SUCCESS :\r\n            return {\r\n                ...state,\r\n                initialized: true\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const initializedSuccess = () => {\r\n    return {\r\n        type: INITIALIZED_SUCCESS,\r\n    } as const;\r\n}\r\n\r\nexport const initializeApp = (): ThunkType => {\r\n    return (dispatch: ThunkDispatch<AppRootState, unknown, SWActionType>) => {\r\n        let promise = dispatch(authMe());\r\n        Promise.all([promise])\r\n            .then(() => {\r\n                dispatch(initializedSuccess());\r\n            }).catch(() => {\r\n            dispatch(initializedSuccess());\r\n        })\r\n    }\r\n}\r\n","import {applyMiddleware, combineReducers, compose, createStore} from \"redux\";\r\nimport profileReducer from \"./profile-reducer\";\r\nimport dialogsReducer from \"./dialogs-reducer\";\r\nimport navbarReducer from \"./navbar-reducer\";\r\nimport usersReducer from \"./users-reducer\";\r\nimport authReducer from \"./auth-reducer\";\r\nimport {reducer as formReducer} from 'redux-form'\r\n// import thunk as thunkMiddleware from 'redux-thunk';\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport {appReducer} from \"./app-reducer\";\r\n\r\nexport type MessagesType = {\r\n    id: string,\r\n    message: string\r\n}\r\n\r\n\r\nlet reducers = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogsPage: dialogsReducer,\r\n    sidebar: navbarReducer,\r\n    usersPage: usersReducer,\r\n    auth: authReducer,\r\n    form: formReducer,\r\n    app: appReducer\r\n});\r\n\r\n// @ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(reducers, /* preloadedState, */ composeEnhancers(applyMiddleware(thunkMiddleware)));\r\n\r\ntype PropertiesType<T> = T extends { [key: string]: infer U } ? U : never ;\r\nexport type InferActionsType<T extends { [key: string]: (...args: any[]) => any }> = ReturnType<PropertiesType<T>>;\r\n// let store = createStore(reducers, applyMiddleware(thunkMiddleware));\r\n\r\nexport type AppRootState = ReturnType<typeof reducers>;\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\n\r\nexport default store;\r\n","import {AppRootState} from \"./redux-store\";\r\n\r\nexport const getIsAuth = (state: AppRootState) => {\r\n    return state.auth.isAuth;\r\n}\r\nexport const getLogin = (state: AppRootState) => {\r\n    return state.auth.login;\r\n}\r\nexport const getAuthUser = (state: AppRootState) => {\r\n    return state.auth.authUser;\r\n}\r\n\r\n","import React from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\nimport {logout} from \"../../redux/auth-reducer\";\r\n\r\nimport {Avatar, Button, Col, Layout, Menu, Row} from \"antd\";\r\nimport {UserOutlined} from '@ant-design/icons';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {getAuthUser, getIsAuth, getLogin} from \"../../redux/auth-selectors\";\r\nimport {AppRootState} from \"../../redux/redux-store\";\r\n\r\n\r\ntype PropsType = {\r\n    // isAuth: boolean;\r\n    // login: string | null;\r\n    // authUser: AuthUserType | null;\r\n    // logout: () => void;\r\n}\r\nexport const Header = (props: PropsType) => {\r\n    const {Header} = Layout;\r\n\r\n    const isAuth = useSelector(getIsAuth);\r\n    const login = useSelector(getLogin);\r\n    const authUser = useSelector(getAuthUser);\r\n\r\n    const userAvatar = useSelector<AppRootState, any>(state => state.auth.authUser);\r\n    console.log(userAvatar)\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const onLogout = () => {\r\n        dispatch(logout());\r\n    }\r\n\r\n\r\n    return <Header className=\"header\">\r\n        <div className=\"logo\"/>\r\n        <Row>\r\n            <Col span={18}>\r\n                <Menu theme=\"dark\" mode=\"horizontal\" defaultSelectedKeys={['2']}>\r\n                    <Menu.Item key=\"1\"><NavLink to='/users'>Users</NavLink></Menu.Item>\r\n                </Menu>\r\n            </Col>\r\n            {\r\n                isAuth ? <>\r\n                        <Col span={1}>\r\n                            {/*<img*/}\r\n                            {/*    src={authUser ? 'https://i03.fotocdn.net/s121/f5452ede0f497c83/user_l/2769409821.jpg' : \"\"}*/}\r\n                            {/*    alt={'logo'}/>*/}\r\n                            <Avatar style={{backgroundColor: '#87d068'}} icon={<UserOutlined/>}/>\r\n\r\n                        </Col>\r\n                        <Col span={5}>\r\n                            <Button onClick={onLogout}>logOut</Button>\r\n                        </Col>\r\n                    </>\r\n                    :\r\n                    <Col span={6}>\r\n                        <Button>\r\n                            <NavLink to={'/login'}>login</NavLink>\r\n                        </Button>\r\n                    </Col>\r\n            }\r\n\r\n        </Row>\r\n    </Header>\r\n\r\n\r\n    // <header className={styles.header}>\r\n    //     <img src=\"https://i.pinimg.com/originals/33/b8/69/33b869f90619e81763dbf1fccc896d8d.jpg\" alt=\"logo\"/>\r\n    //     <div className={styles.loginBlock}>\r\n    //         {\r\n\r\n    //     props.isAuth ? <div className={styles.imgBlock}>\r\n    //             <img\r\n    //                 src={props.authUser ? 'https://i03.fotocdn.net/s121/f5452ede0f497c83/user_l/2769409821.jpg' : \"\"}\r\n    //                 alt={'logo'}/>\r\n    //             <button onClick={props.logout} className={styles.logout}>logOut</button>\r\n    //         </div>\r\n    //         : <NavLink to={'/login'}>\r\n    //             login\r\n    //         </NavLink>\r\n    // }\r\n    //     </div>\r\n    // </header>\r\n\r\n}\r\n\r\nexport default Header;","import React, {Suspense} from 'react';\r\nimport './App.css';\r\nimport News from './components/news/news';\r\nimport Music from \"./components/music/music\";\r\nimport Settings from \"./components/settings/settings\";\r\n\r\nimport {HashRouter, NavLink, Redirect, Route, RouteComponentProps, Switch, withRouter} from 'react-router-dom';\r\nimport UsersContainer from './components/users/UsersContainer';\r\nimport Login from \"./components/login/Login\";\r\nimport {connect, Provider} from \"react-redux\";\r\nimport store, {AppRootState} from \"./redux/redux-store\";\r\nimport {compose} from 'redux';\r\nimport {initializeApp} from \"./redux/app-reducer\";\r\nimport Preloader from \"./assets/preloader/Preloader\";\r\n//And Design\r\nimport 'antd/dist/antd.css';\r\nimport {Avatar, Breadcrumb, Col, Layout, Menu, Row} from 'antd';\r\nimport {LaptopOutlined, NotificationOutlined, UserOutlined} from '@ant-design/icons';\r\nimport Header from \"./components/header/header\";\r\n\r\nconst {SubMenu} = Menu;\r\nconst { Content, Footer, Sider} = Layout;\r\n\r\nconst DialogsContainer = React.lazy(() => import('./components/dialogs/dialogsContainer'));\r\nconst ProfileContainer = React.lazy(() => import('./components/profile/profileContainer'));\r\n\r\n\r\ntype OwnPropsType = MapDispatchToProps & MapStatePropsType;\r\ntype PropsType = RouteComponentProps & OwnPropsType;\r\n\r\nclass App extends React.Component<PropsType> {\r\n\r\n    catchAllUnhandledErrors = (promiseRejectionEvent: any) => {\r\n        // alert(promiseRejectionEvent.reason);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.initializeApp();\r\n        window.addEventListener('unhandledrejection', this.catchAllUnhandledErrors);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener('unhandledrejection', this.catchAllUnhandledErrors);\r\n    }\r\n\r\n    render() {\r\n        if (!this.props.initialized) {\r\n            return <Preloader/>\r\n        }\r\n        // const location = useLocation();\r\n        // const {pathname} = location;\r\n\r\n        return (\r\n            <Layout>\r\n                {/*<Header className=\"header\">*/}\r\n                {/*    <div className=\"logo\"/>*/}\r\n                {/*    <Row>*/}\r\n                {/*        <Col span={20}>*/}\r\n                {/*            <Menu theme=\"dark\" mode=\"horizontal\" defaultSelectedKeys={['2']}>*/}\r\n                {/*                <Menu.Item key=\"1\"><NavLink to='/users'>Users</NavLink></Menu.Item>*/}\r\n                {/*            </Menu>*/}\r\n                {/*        </Col>*/}\r\n                {/*        <Col span={4}>*/}\r\n                {/*            <Avatar style={{backgroundColor: '#87d068'}} icon={<UserOutlined/>}/>*/}\r\n                {/*        </Col>*/}\r\n                {/*    </Row>*/}\r\n                {/*</Header>*/}\r\n                <Header/>\r\n                <Content style={{padding: '0 50px'}}>\r\n                    <Breadcrumb style={{margin: '16px 0'}}>\r\n                        <Breadcrumb.Item>Home</Breadcrumb.Item>\r\n                        <Breadcrumb.Item>List</Breadcrumb.Item>\r\n                        <Breadcrumb.Item>App</Breadcrumb.Item>\r\n                    </Breadcrumb>\r\n                    <Layout className=\"site-layout-background\" style={{padding: '24px 0'}}>\r\n                        <Sider className=\"site-layout-background\" width={200}>\r\n                            <Menu\r\n                                mode=\"inline\"\r\n                                defaultSelectedKeys={['1']}\r\n                                defaultOpenKeys={['sub1']}\r\n                                style={{height: '100%'}}\r\n                                // theme=\"dark\"\r\n                                // selectedKeys={[pathname]}\r\n                            >\r\n                                <SubMenu key=\"sub1\" icon={<UserOutlined/>} title=\"My Profile\">\r\n                                    <Menu.Item key=\"1\"> <NavLink to='/profile'>Profile</NavLink></Menu.Item>\r\n                                    <Menu.Item key=\"2\"> <NavLink to='/dialogs'>Messages</NavLink></Menu.Item>\r\n                                </SubMenu>\r\n                                <SubMenu key=\"sub2\" icon={<LaptopOutlined/>} title=\"News\">\r\n                                    <Menu.Item key=\"3\"> <NavLink to='/news'>News</NavLink></Menu.Item>\r\n                                </SubMenu>\r\n                                <SubMenu key=\"sub3\" icon={<NotificationOutlined/>} title=\"Music\">\r\n                                    <Menu.Item key=\"4\"> <NavLink to='/music'>Music</NavLink></Menu.Item>\r\n                                </SubMenu>\r\n                                <SubMenu key=\"sub4\" icon={<NotificationOutlined/>} title=\"Users\">\r\n                                    <Menu.Item key=\"5\"> <NavLink to='/users'>Users</NavLink></Menu.Item>\r\n                                </SubMenu>\r\n                            </Menu>\r\n                        </Sider>\r\n                        <Content style={{padding: '0 24px', minHeight: 280}}>\r\n                            <Suspense fallback={<Preloader/>}>\r\n                                <Switch>\r\n                                    <Route exact path={'/'}><Redirect to={'/profile'}/></Route>\r\n                                    <Route path={'/profile/:userId?'} render={() => <ProfileContainer/>}/>\r\n                                    <Route path={'/dialogs'} render={() => <DialogsContainer/>}/>\r\n                                    <Route path={'/music'} render={() => <Music/>}/>\r\n                                    <Route path={'/news'} component={News}/>\r\n                                    <Route path={'/settings'} component={Settings}/>\r\n                                    <Route path={'/users'} render={() => <UsersContainer/>}/>\r\n                                    <Route path={'/login'} render={() => <Login/>}/>\r\n                                    <Route path={'*'} render={() => <div>404 - NOT FOUND </div>}/>\r\n                                </Switch>\r\n                            </Suspense>\r\n                        </Content>\r\n                    </Layout>\r\n                </Content>\r\n                <Footer style={{textAlign: 'center'}}>Ant Design ©2018 Created by Ant UED</Footer>\r\n            </Layout>\r\n            //old\r\n            // <div className='app-wrapper'>\r\n            //     <HeaderContainer/>\r\n            //     <Navbar/>\r\n            //     <div className='app-wrapper-content'>\r\n            //         <Suspense fallback={<Preloader/>}>\r\n            //             <Switch>\r\n            //                 <Route exact path={'/'}><Redirect to={'/profile'}/></Route>\r\n            //                 <Route path={'/profile/:userId?'} render={() => <ProfileContainer/>}/>\r\n            //                 <Route path={'/dialogs'} render={() => <DialogsContainer/>}/>\r\n            //                 <Route path={'/music'} render={() => <Music/>}/>\r\n            //                 <Route path={'/news'} component={News}/>\r\n            //                 <Route path={'/settings'} component={Settings}/>\r\n            //                 <Route path={'/users'} render={() => <UsersContainer/>}/>\r\n            //                 <Route path={'/login'} render={() => <Login/>}/>\r\n            //                 <Route path={'*'} render={() => <div>404 - NOT FOUND </div>}/>\r\n            //             </Switch>\r\n            //         </Suspense>\r\n            //     </div>\r\n            // </div>\r\n        );\r\n    }\r\n}\r\n\r\ntype MapDispatchToProps = {\r\n    initializeApp: () => void;\r\n}\r\ntype MapStatePropsType = {\r\n    initialized: boolean\r\n}\r\nconst mapStateToProps = (state: AppRootState): MapStatePropsType => {\r\n    return {\r\n        initialized: state.app.initialized\r\n    }\r\n}\r\n\r\nconst AppContainer = compose<React.ComponentType>(\r\n    withRouter,\r\n    connect<MapStatePropsType, MapDispatchToProps, {}, AppRootState>(mapStateToProps, {\r\n            initializeApp\r\n        }\r\n    ))(App);\r\n\r\nconst SamuraiApp = () => {\r\n    return <Provider store={store}>\r\n        <HashRouter\r\n            // basename={process.env.PUBLIC_URL}\r\n        >\r\n            <AppContainer/>\r\n        </HashRouter>\r\n    </Provider>\r\n}\r\n\r\nexport default SamuraiApp;\r\n\r\n\r\n\r\n\r\n\r\n","import ReactDOM from \"react-dom\";\r\nimport React from \"react\";\r\nimport SamuraiApp from \"./App\";\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <SamuraiApp/>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n","import React from \"react\";\r\nimport styles from \"./FormsControls.module.css\";\r\nimport {WrappedFieldMetaProps} from \"redux-form\";\r\ntype ElementParamsType = {\r\n    meta:WrappedFieldMetaProps\r\n}\r\n// type ElemControlType = (params:ElementParamsType) => React.ReactNode\r\n\r\nexport const Element= (Element: any):React.FC<ElementParamsType>  => ({input, meta, ...props}: any) => {\r\n    const hasError = meta.touched && meta.error;\r\n    return (\r\n        <div className={`${styles.formControl} ${hasError ? styles.error : ''}`}>\r\n            <div>\r\n                <Element {...input} {...props}/>\r\n            </div>\r\n            {hasError && <span>{meta.error}</span>}\r\n        </div>\r\n    )\r\n}\r\nexport const Textarea = Element('textarea');\r\nexport const Input = Element('input');\r\n\r\n// export const Textarea = ({input, meta, ...props}: any) => {\r\n//     const hasError = meta.touched && meta.error;\r\n//     return (\r\n//         <div className={`${styles.formControl} ${hasError ? styles.error : ''}`}>\r\n//             <div>\r\n//                 <textarea {...input} {...props}/>\r\n//             </div>\r\n//             {hasError && <span>{meta.error}</span>}\r\n//         </div>\r\n//     )\r\n// }\r\n// export const Input = ({input, meta, ...props}: any) => {\r\n//     const hasError = meta.touched && meta.error;\r\n//     return (\r\n//         <div className={`${styles.formControl} ${hasError ? styles.error : ''}`}>\r\n//             <div>\r\n//                 <input {...input} {...props}/>\r\n//             </div>\r\n//             {hasError && <span>{meta.error}</span>}\r\n//         </div>\r\n//     )\r\n// }\r\n","import preloader from \"../preloader/svg-loaders/oval.svg\";\r\nimport React from \"react\";\r\n\r\nconst Preloader = () => {\r\n    return (\r\n        <img src={preloader} alt=\"preloader\" style={ { margin:'300px 300px',} }/>\r\n    );\r\n}\r\n\r\nexport default Preloader;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__3ScpV\",\"error\":\"FormsControls_error__2YSjM\",\"commonErrorField\":\"FormsControls_commonErrorField__3aTah\"};"],"sourceRoot":""}