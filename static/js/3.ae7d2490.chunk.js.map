{"version":3,"sources":["components/profile/profile.module.css","components/profile/profileInfo/profileInfo.module.css","components/profile/my-posts/myPosts.module.css","components/profile/my-posts/post/post.module.css","components/profile/profileInfo/profilestatus/ProfileStatus.tsx","components/profile/profileInfo/profileInfo.tsx","components/profile/my-posts/post/post.tsx","components/profile/my-posts/myPosts.tsx","components/profile/my-posts/myPostsContainer.ts","components/profile/profile.tsx","components/profile/profileContainer.tsx"],"names":["module","exports","ProfileStatus","state","editMode","status","props","activateEditMode","setState","deactivateEditMode","updateUserStatus","onChangeStatus","e","currentTarget","value","prevProps","prevState","snapshot","this","className","styles","profileStatusBlock","type","autoFocus","onBlur","onChange","onDoubleClick","React","Component","ProfileInfo","profile","style","profileInfo","src","alt","description","photos","small","userPhoto","width","fullName","aboutMe","lookingForAJobDescription","Preloader","Post","message","likeCount","item","maxLength30","maxLengthCreator","MyPosts","memo","profilePage","addPost","postsBlock","AddPostMessageFormRedux","onSubmit","formData","newMessageBody","posts","map","id","key","reduxForm","form","handleSubmit","Field","name","placeholder","component","Textarea","validate","required","MyPostsContainer","connect","dispatch","addPostAC","Profile","content","ProfileContainer","userId","match","params","logginedUserId","String","history","push","getUserProfile","getUserStatus","compose","auth","withRouter"],"mappings":"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","file":"static/js/3.ae7d2490.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"profile_content__3R0x5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"description\":\"profileInfo_description__N-3QO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"myPosts_postsBlock__3b2mG\",\"posts\":\"myPosts_posts__3l4I5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"post_item__XC1dh\"};","import React, {ChangeEvent} from 'react';\r\nimport styles from './ProfileStatus.module.css';\r\n\r\ntype PropsType = {\r\n    status: string;\r\n    updateUserStatus: (status: string) => void;\r\n}\r\n\r\nexport class ProfileStatus extends React.Component<PropsType> {\r\n    state = {\r\n        editMode: false,\r\n        status: this.props.status\r\n    }\r\n\r\n    activateEditMode = () => {\r\n        this.setState({\r\n            editMode: true\r\n        });\r\n    }\r\n    deactivateEditMode = () => {\r\n        this.setState({\r\n            editMode: false\r\n        });\r\n        this.props.updateUserStatus(this.state.status);\r\n    }\r\n\r\n    onChangeStatus = (e: ChangeEvent<HTMLInputElement>) => {\r\n        this.setState({\r\n            status: e.currentTarget.value\r\n        });\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<PropsType>, prevState: Readonly<{}>, snapshot?: any) {\r\n        if (prevProps.status !== this.props.status) {\r\n            this.setState({\r\n                status: this.props.status\r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={styles.profileStatusBlock}>\r\n                {this.state.editMode\r\n                && <input type={'text'}\r\n\t\t\t\t\t\t  value={this.state.status}\r\n\t\t\t\t\t\t  autoFocus={true}\r\n\t\t\t\t\t\t  onBlur={this.deactivateEditMode}\r\n\t\t\t\t\t\t  onChange={this.onChangeStatus}\r\n\t\t\t\t/>}\r\n\r\n                {!this.state.editMode && <div>\r\n\t\t\t\t\t<span onDoubleClick={this.activateEditMode}>{this.props.status || 'No status'}</span>\r\n\t\t\t\t</div>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport style from './profileInfo.module.css';\r\nimport Preloader from \"../../../assets/preloader/Preloader\";\r\nimport userPhoto from '../../../assets/images/green.png'\r\nimport {ProfileStatus} from './profilestatus/ProfileStatus';\r\nimport {ProfileStatusWithHooks} from \"./profilestatus/ProfileStatusWithHooks\";\r\n\r\nexport type ProfileType =  {\r\n    aboutMe: string,\r\n    contacts: {\r\n        [key: string]: string\r\n    },\r\n    lookingForAJob: boolean,\r\n    lookingForAJobDescription: string,\r\n    fullName: string,\r\n    userId: number,\r\n    photos: {\r\n        small: string,\r\n        large: string\r\n    }\r\n}\r\nexport type ProfileInfoType = {\r\n    profile:ProfileType,\r\n    status: string;\r\n    updateUserStatus: (status: string) => void;\r\n}\r\nconst ProfileInfo = (props: ProfileInfoType) => {\r\n    const {profile} = props;\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n    return (\r\n        <div className={style.profileInfo}>\r\n            <div>\r\n                <img\r\n                    src=\"https://p.bigstockphoto.com/GeFvQkBbSLaMdpKXF1Zv_bigstock-Aerial-View-Of-Blue-Lakes-And--227291596.jpg\"\r\n                    alt=\"main-fon\"/>\r\n            </div>\r\n\r\n            <div className={style.description}>\r\n                <div>\r\n                    <img src={profile.photos.small !== null ? profile.photos.small : userPhoto} alt=\"user avator\"\r\n                         width={100}/>\r\n                </div>\r\n                <ProfileStatus status={props.status} updateUserStatus={props.updateUserStatus}/>\r\n                {/*<ProfileStatusWithHooks status={props.status} updateUserStatus={props.updateUserStatus}/>*/}\r\n                <div>\r\n                    <p>Name : {profile.fullName}</p>\r\n                    <p>Description : {profile.aboutMe}</p>\r\n                    <p>lookingForAJobDescription : {profile.lookingForAJobDescription}</p>\r\n                </div>\r\n                ava + description\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ProfileInfo;","import React from 'react';\r\nimport style from './post.module.css';\r\n\r\ntype propsType = {\r\n    message : string,\r\n    likeCount : string\r\n}\r\n\r\nconst Post = (props : propsType) => {\r\n    const {message, likeCount} = props;\r\n\r\n    return (\r\n        <div className={style.item}>\r\n            <img\r\n                src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcTmHvlQey7sRB-lIKvwZQHlY-Gwi0TIDWloz6LZcCYwdubZ5-nV&usqp=CAU\"\r\n                alt=\"user\"/>\r\n            {message}\r\n            <span>{likeCount} - like</span>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Post;","import React from 'react';\r\nimport style from './myPosts.module.css';\r\nimport Post from \"./post/post\";\r\nimport {ProfileInfoType} from \"../profileInfo/profileInfo\";\r\nimport {ObjPostType} from \"../../../redux/redux-store\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {required, maxLengthCreator} from \"../../../utils/validators/validators\";\r\nimport {Textarea} from '../../common/formsControls/FormsControls';\r\n\r\ntype PropsType = {\r\n    profilePage: {\r\n        posts: Array<ObjPostType>;\r\n        profile: ProfileInfoType | null;\r\n    };\r\n    addPost: (value: string) => void;\r\n}\r\n\r\nconst maxLength30 = maxLengthCreator(30);\r\n\r\nconst MyPosts = React.memo((props: PropsType) => {\r\n    const {profilePage, addPost} = props;\r\n\r\n    const onSubmit = (formData: FormDataType) => {\r\n        addPost(formData.newMessageBody)\r\n    }\r\n\r\n    return (\r\n        <div className={style.postsBlock}>\r\n            My Posts\r\n            <div>\r\n                <AddPostMessageFormRedux onSubmit={onSubmit}/>\r\n            </div>\r\n            <div className={style.posts}>\r\n                {\r\n                    profilePage.posts.map(({id, message, likeCount}) => <Post message={message}\r\n                                                                              likeCount={likeCount}\r\n                                                                              key={id}/>)\r\n                }\r\n            </div>\r\n        </div>\r\n    );\r\n});\r\n\r\ntype FormDataType = {\r\n    newMessageBody: string\r\n}\r\n\r\nexport const AddPostMessageForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\r\n\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field name='newMessageBody' placeholder='Enter you Post message' component={Textarea}\r\n                       validate={[required, maxLength30]}/>\r\n            </div>\r\n            <div>\r\n                <button>Send</button>\r\n            </div>\r\n        </form>\r\n    );\r\n}\r\n\r\nconst AddPostMessageFormRedux = reduxForm<FormDataType>({form: 'addPostMessageForm'})(AddPostMessageForm);\r\n\r\nexport default MyPosts;","import {addPostAC, ProfileReducerInitialStateType} from \"../../../redux/profile-reducer\";\r\nimport MyPosts from \"./myPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppRootState} from \"../../../redux/redux-store\";\r\nimport {Dispatch} from \"redux\";\r\n\r\ntype ObjType = {\r\n    id: string,\r\n    message: string,\r\n    likeCount: string\r\n}\r\n\r\ntype MapStateToPropsType = {\r\n    profilePage: ProfileReducerInitialStateType\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    addPost: (value:string) => void;\r\n}\r\n\r\n\r\n\r\nlet mapStateToProps = (state: AppRootState): MapStateToPropsType => {\r\n    return {\r\n        profilePage: state.profilePage\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType => {\r\n    return {\r\n        addPost: (value:string) => {\r\n            dispatch(addPostAC(value));\r\n        }\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect<MapStateToPropsType, MapDispatchToPropsType, {}, AppRootState>(mapStateToProps, mapDispatchToProps)(MyPosts);\r\n\r\nexport default MyPostsContainer;","import React from 'react';\r\nimport style from './profile.module.css';\r\nimport ProfileInfo from \"./profileInfo/profileInfo\";\r\nimport MyPostsContainer from \"./my-posts/myPostsContainer\";\r\n\r\ntype propsType = {\r\n    getUserProfile: (userId:string) => void,\r\n    profile: any;\r\n    status: string;\r\n    updateUserStatus: (status: string) => void;\r\n}\r\n\r\n// FC<ProfileContainerProps>\r\nconst Profile = (props: propsType) => {\r\n    return (\r\n        <section className={style.content}>\r\n            <ProfileInfo profile={props.profile}  status={props.status} updateUserStatus={props.updateUserStatus}/>\r\n            <MyPostsContainer/>\r\n        </section>\r\n    );\r\n}\r\n\r\nexport default Profile;","import React from \"react\";\r\nimport Profile from \"./profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {getUserProfile, getUserStatus, updateUserStatus} from \"../../redux/profile-reducer\";\r\nimport {AppRootState} from \"../../redux/redux-store\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {ProfileInfoType} from \"./profileInfo/profileInfo\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\ntype PathParamsType = {\r\n    userId: string;\r\n}\r\ntype MapStatePropsType = {\r\n    profile: ProfileInfoType | null;\r\n    status: string;\r\n    logginedUserId: number | null;\r\n}\r\ntype MapDispatchToProps = {\r\n    getUserProfile: (userId: string) => void;\r\n    getUserStatus: (userId: string) => void;\r\n    updateUserStatus: (status: string) => void;\r\n}\r\ntype OwnPropsType = MapStatePropsType & MapDispatchToProps;\r\ntype PropsType = RouteComponentProps<PathParamsType> & OwnPropsType;\r\n\r\n\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n\r\n    componentDidMount() {\r\n        let userId = this.props.match.params.userId;\r\n        if (!userId) {\r\n            if (this.props.logginedUserId) {\r\n                userId = String(this.props.logginedUserId);\r\n            }\r\n            if (!userId) {\r\n                this.props.history.push(\"/login\");\r\n            }\r\n        }\r\n        this.props.getUserProfile(userId);\r\n        this.props.getUserStatus(userId);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Profile  {...this.props} profile={this.props.profile} status={this.props.status}\r\n                      updateUserStatus={this.props.updateUserStatus}/>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppRootState): MapStatePropsType => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    logginedUserId: state.auth.id\r\n});\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect<MapStatePropsType, MapDispatchToProps, {}, AppRootState>(mapStateToProps, {\r\n        getUserProfile,\r\n        getUserStatus,\r\n        updateUserStatus\r\n    }),\r\n    withRouter,\r\n    // withAuthRedirect\r\n)(ProfileContainer);\r\n\r\n// let AuthRedirectComponent = withAuthRedirect(ProfileContainer);\r\n//\r\n//\r\n//\r\n// let WithUrlDataContainerComponent = withRouter(AuthRedirectComponent);\r\n//\r\n// export default connect<MapStatePropsType, MapDispatchToProps, {}, AppRootState>(mapStateToProps, {getUserProfile})(WithUrlDataContainerComponent);"],"sourceRoot":""}