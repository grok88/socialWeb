{"version":3,"sources":["assets/images/green.png","utils/validators/validators.ts","components/common/formsControls/FormsControls.module.css","api/profile-api.ts","redux/profile-reducer.tsx","api/api.ts","redux/dialogs-reducer.tsx","components/news/news.module.css","components/common/Paginator/Paginator.module.css","assets/preloader/svg-loaders/oval.svg","components/news/news.tsx","components/music/music.tsx","components/settings/settings.tsx","components/common/Paginator/Paginator.tsx","components/users/User.tsx","redux/users-selectors.ts","components/users/UsersSearchForm.tsx","utils/object-helpers.ts","api/users-api.ts","redux/users-reducer.tsx","components/users/UsersClass.tsx","components/users/UsersContainer.tsx","api/auth-api.ts","api/security-api.ts","redux/auth-reducer.ts","components/login/Login.tsx","redux/navbar-reducer.tsx","redux/app-reducer.ts","redux/redux-store.tsx","redux/auth-selectors.ts","components/header/header.tsx","App.tsx","index.tsx","components/login/Login.module.css","components/common/formsControls/FormsControls.tsx","assets/preloader/Preloader.tsx"],"names":["module","exports","required","value","undefined","maxLengthCreator","max","length","profileApi","id","instance","get","then","res","data","userId","status","put","photo","formData","FormData","append","headers","profile","InitialState","posts","v1","message","likeCount","actions","addPostAC","type","deleteAC","postId","setUserProfile","setUserStatus","savePhotoSuccess","getUserProfile","dispatch","a","getUserStatus","userID","resp","updateUserStatus","resultCode","console","log","savePhoto","file","getState","profilePage","photos","name","saveProfile","String","auth","stopSubmit","_error","messages","Promise","reject","profileReducer","state","action","stateCopy","newPost","push","filter","p","ResultCodeEnum","ResultCodeForCaptchaEnum","axios","create","withCredentials","baseURL","initialState","dialogs","url","addMessAC","dialogsReducer","newMess","News","className","style","music","Music","Settings","settings","Paginator","props","pageCount","Math","ceil","totalItemsCount","pageSize","pages","i","portionCount","portionSize","leftPortionPageNumber","portionNumber","rightPortionPageNumber","onClick","setPortionNumber","map","key","currentPage","selectedPage","e","changedPage","User","user","unfollow","follow","to","src","small","userPhoto","alt","width","height","followed","getIsFetching","usersPage","isFetching","getUsers","createSelector","users","getPageSize","getTotalUsersCount","totalUsersCount","getCurrentPage","getFilter","usersSearchFormValidate","values","UsersSearchForm","React","memo","useSelector","enableReinitialize","initialValues","term","friend","validate","onSubmit","setSubmitting","changeFilter","isSubmitting","as","disabled","updateObjectInArray","items","itemId","itemProps","newObjProps","userApi","response","post","unFollow","delete","followingInProgress","payload","totalCount","requestUsers","requestPage","followUnfollowFlow","apiMethod","actionCreator","usersReducer","Users","useState","useDispatch","history","useHistory","useEffect","search","location","substr","parsed","queryString","actualPage","page","Number","actualFilter","query","pathname","pageNumber","bind","UsersPage","Preloader","authApi","email","password","rememberMe","captcha","securityApi","login","isAuth","authUser","captchaUrl","authReducer","authMe","meData","Success","getCaptcha","LoginReduxForm","reduxForm","form","handleSubmit","error","styles","loginForm","userBox","Field","placeholder","component","Input","checkBox","htmlFor","commonErrorField","btn","LoginPage","loginBox","checkbox","CaptchaIsRequired","SET_USERS","SET_STATUS","navbarReducer","initialized","reducers","combineReducers","dialogsPage","sidebar","formReducer","app","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","getIsAuth","Header","Layout","span","theme","mode","defaultSelectedKeys","Item","userPhotos","SubMenu","Menu","Content","Footer","Sider","DialogsContainer","lazy","ProfileContainer","ChatPagesContainer","App","catchAllUnhandledErrors","alert","reason","this","initializeApp","addEventListener","removeEventListener","match","padding","defaultOpenKeys","selectedKeys","icon","UserOutlined","title","LaptopOutlined","NotificationOutlined","minHeight","fallback","exact","path","render","textAlign","Component","AppContainer","withRouter","connect","promise","all","catch","SamuraiApp","ReactDOM","StrictMode","document","getElementById","Element","input","meta","hasError","touched","formControl","Textarea","preloader","margin"],"mappings":"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","file":"static/js/main.10f34d14.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/green.97a73095.png\";","export const required = (value: string) => {\r\n    return value ? undefined : 'Field is required';\r\n}\r\n\r\nexport const maxLengthCreator = (max: number) => (value: string) => {\r\n    return value && value.length > max ? `Must be ${max} characters or less` : undefined;\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__3ScpV\",\"error\":\"FormsControls_error__2YSjM\",\"commonErrorField\":\"FormsControls_commonErrorField__3aTah\"};","import {ProfileDataFormType} from \"../components/profile/profileInfo/ProfileDataForm/ProfileDataForm\";\r\nimport {APIResponseType, instance} from \"./api\";\r\n\r\nimport {ProfileType} from \"../components/profile/profileInfo/profileInfo\";\r\n\r\nexport const profileApi = {\r\n    getUserProfileById(id: string) {\r\n        return instance.get<ProfileType>(`profile/${id}`).then(res => res.data)\r\n    },\r\n    getStatus(userId: string) {\r\n        return instance.get<string>(`profile/status/${userId}`).then(res => res.data);\r\n    },\r\n    updateStatus(status: string) {\r\n        return instance.put<APIResponseType>(`profile/status`, {status}).then(res => res.data);\r\n    },\r\n    savePhoto(photo: File) {\r\n        let formData = new FormData();\r\n        formData.append('image', photo)\r\n        return instance.put<APIResponseType<{ photos: { small: string, large: string } }>>(`profile/photo`, formData, {\r\n            headers: {\r\n                'content-type': 'multipart/form-data'\r\n            }\r\n        }).then(res => res.data);\r\n    },\r\n    saveProfile(profile: ProfileDataFormType) {\r\n        return instance.put<APIResponseType>('profile', profile)\r\n            .then(res => res.data);\r\n    }\r\n}\r\n","import {v1} from \"uuid\";\r\nimport {ProfileType} from \"../components/profile/profileInfo/profileInfo\";\r\nimport {AppRootState, InferActionsType} from \"./redux-store\";\r\nimport {SWActionType, ThunkType} from \"./users-reducer\";\r\nimport {ThunkDispatch} from \"redux-thunk\";\r\nimport {ProfileDataFormType} from \"../components/profile/profileInfo/ProfileDataForm/ProfileDataForm\";\r\nimport {stopSubmit} from \"redux-form\";\r\nimport {ObjPostType} from \"../types/types\";\r\nimport {profileApi} from \"../api/profile-api\";\r\n\r\nexport type profileReducerType = InferActionsType<typeof actions>\r\n\r\nexport type ProfileReducerInitialStateType = typeof InitialState;\r\n\r\nlet InitialState = {\r\n    posts: [\r\n        {id: v1(), message: 'Hello, What are you doing?', likeCount: '5'},\r\n        {id: v1(), message: 'Hi, I am learning TypeScript now.', likeCount: '13'},\r\n    ] as Array<ObjPostType>,\r\n    profile: null as ProfileType | null,\r\n    status: ''\r\n}\r\n\r\nconst profileReducer = (state: ProfileReducerInitialStateType = InitialState, action: profileReducerType): ProfileReducerInitialStateType => {\r\n    switch (action.type) {\r\n        case \"profile/ADD-POST\" :\r\n            let stateCopy = {\r\n                ...state,\r\n                posts: [...state.posts],\r\n\r\n            }\r\n            const newPost: ObjPostType = {\r\n                id: v1(),\r\n                message: action.value,\r\n                likeCount: \"0\"\r\n            }\r\n            stateCopy.posts.push(newPost);\r\n            return stateCopy;\r\n        case \"profile/DELETE-POST\":\r\n            return {\r\n                ...state,\r\n                posts: state.posts.filter(p => p.id !== action.postId),\r\n            }\r\n        case \"profile/SET-USER-PROFILE\":\r\n            return {\r\n                ...state,\r\n                profile: action.profile\r\n            }\r\n        case \"profile/SET-USER-STATUS\":\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            }\r\n        case \"profile/SET-PHOTO-SUCCESS\":\r\n            return {\r\n                ...state,\r\n                profile: action.profile\r\n            }\r\n\r\n        default :\r\n            return state;\r\n    }\r\n}\r\n\r\n// actions\r\nexport const actions = {\r\n    addPostAC: (value: string) => {\r\n        return {\r\n            type: 'profile/ADD-POST',\r\n            value\r\n        } as const;\r\n    },\r\n    deleteAC: (postId: string) => {\r\n        return {\r\n            type: 'profile/DELETE-POST',\r\n            postId\r\n        } as const;\r\n    },\r\n    setUserProfile: (profile: ProfileType) => {\r\n        return {\r\n            type: 'profile/SET-USER-PROFILE',\r\n            profile\r\n        } as const;\r\n    },\r\n    setUserStatus: (status: string) => {\r\n        return {\r\n            type: 'profile/SET-USER-STATUS',\r\n            status\r\n        } as const;\r\n    },\r\n    savePhotoSuccess: (profile: ProfileType) => {\r\n        return {\r\n            type: 'profile/SET-PHOTO-SUCCESS',\r\n            profile\r\n        } as const;\r\n    }\r\n}\r\n\r\n\r\n//thunk\r\nexport const getUserProfile = (userId: string): ThunkType => async (dispatch: ThunkDispatch<AppRootState, unknown, SWActionType>) => {\r\n    const res = await profileApi.getUserProfileById(userId);\r\n    dispatch(actions.setUserProfile(res));\r\n}\r\n\r\nexport const getUserStatus = (userID: string): ThunkType => {\r\n    return async (dispatch: ThunkDispatch<AppRootState, unknown, SWActionType>) => {\r\n        const resp = await profileApi.getStatus(userID);\r\n        dispatch(actions.setUserStatus(resp));\r\n    }\r\n}\r\nexport const updateUserStatus = (status: string): ThunkType => {\r\n    return async (dispatch: ThunkDispatch<AppRootState, unknown, SWActionType>) => {\r\n        try {\r\n            const resp = await profileApi.updateStatus(status);\r\n            if (resp.resultCode === 0) {\r\n                dispatch(actions.setUserStatus(status));\r\n            }\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n}\r\nexport const savePhoto = (file: File): ThunkType => {\r\n    return async (dispatch: ThunkDispatch<AppRootState, unknown, SWActionType>, getState: () => AppRootState) => {\r\n        try {\r\n            const resp = await profileApi.savePhoto(file);\r\n            if (resp.resultCode === 0) {\r\n                const profile = getState().profilePage.profile\r\n                profile && dispatch(actions.savePhotoSuccess({...profile, photos: resp.data.photos}));\r\n            }\r\n        } catch (e) {\r\n            console.log(e.name);\r\n        }\r\n    }\r\n}\r\nexport const saveProfile = (profile: ProfileDataFormType): ThunkType => {\r\n    return async (dispatch: ThunkDispatch<AppRootState, unknown, SWActionType>, getState: () => AppRootState) => {\r\n        const userId = String(getState().auth.id);\r\n        try {\r\n            const resp = await profileApi.saveProfile(profile);\r\n            if (resp.resultCode === 0) {\r\n                dispatch(getUserProfile(userId));\r\n            } else {\r\n                dispatch(stopSubmit('edit-profile', {_error: resp.messages[0]}));\r\n                return Promise.reject(resp.messages[0]);\r\n            }\r\n        } catch (e) {\r\n            console.log(e.name);\r\n        }\r\n    }\r\n}\r\n\r\nexport default profileReducer;\r\n","import axios from \"axios\";\r\n\r\nexport const instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    headers: {\r\n        \"api-key\": \"d957613d-94bb-4388-aef0-47e775e83ac5\"\r\n\r\n    }\r\n})\r\n\r\n\r\nexport enum ResultCodeEnum {\r\n    Success = 0,\r\n    Error = 1,\r\n}\r\n\r\nexport enum ResultCodeForCaptchaEnum {\r\n    CaptchaIsRequired = 10\r\n}\r\n\r\nexport type APIResponseType<D = {}, RC = ResultCodeEnum> = {\r\n    data: D\r\n    messages: Array<string>;\r\n    resultCode: RC\r\n}\r\n","import {v1} from \"uuid\";\r\nimport {DialogItemType} from \"../components/dialogs/dialogItem/dialogItem\";\r\nimport {InferActionsType, MessagesType} from \"./redux-store\";\r\n\r\nexport type dialogsReducerAC = InferActionsType<typeof actions>;\r\n\r\nlet initialState = {\r\n    dialogs: [\r\n        {\r\n            id: v1(),\r\n            name: \"Alex\",\r\n            url: \"https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcSvTQmV6oI5wUAiXdI6JjvFjPAUm7iq2AeNR45ffjomO1zLtmik&usqp=CAU\"\r\n        },\r\n        {\r\n            id: v1(),\r\n            name: \"Gor\",\r\n            url: \"https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcTT1zZkQjtBjyYp5uq1qhmdpmoRkTFws1hL54z8U40EQv08o06Q&usqp=CAU\"\r\n        },\r\n        {\r\n            id: v1(),\r\n            name: \"Jora\",\r\n            url: \"https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcTK9DkWY2BgUcJMNZXyAz6Cpmiq-AhC098wtOnBL-3foioVeyaI&usqp=CAU\"\r\n        },\r\n        {\r\n            id: v1(),\r\n            name: \"Anyfriy\",\r\n            url: \"https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcQqX1EK98tD5uSgn72MKv-2pEhDAPiiiIgXH7LMYAe982_CtbRN&usqp=CAU\"\r\n        },\r\n        {\r\n            id: v1(),\r\n            name: \"Sveta\",\r\n            url: \"https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcQb0QBmlGsym_SIuH6d-OrApu0iX0j8K4bxOufsI9D9GeKv7h1i&usqp=CAU\"\r\n        },\r\n        {\r\n            id: v1(),\r\n            name: \"ergey\",\r\n            url: \"https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcS_yhvGXHtP8leB8fhWCAOke-8h5gRG1Wxo6fS814OFjX_g1qOl&usqp=CAU\"\r\n        }\r\n    ] as Array<DialogItemType>,\r\n    messages: [\r\n        {id: v1(), message: 'Hello'},\r\n        {id: v1(), message: 'How are you?'},\r\n        {id: v1(), message: 'I am good!'}\r\n    ] as Array<MessagesType>,\r\n}\r\n\r\nexport type DialogsReducerInitialStateType = typeof initialState;\r\n\r\nexport const dialogsReducer = (state: DialogsReducerInitialStateType = initialState, action: dialogsReducerAC): DialogsReducerInitialStateType => {\r\n    switch (action.type) {\r\n        case \"dialogs/ADD-MESSAGE\" :\r\n            let newMess = {\r\n                id: v1(),\r\n                message: action.value\r\n            }\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages, newMess]\r\n            }\r\n        default :\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    addMessAC: (value: string) => {\r\n        return {\r\n            type: 'dialogs/ADD-MESSAGE',\r\n            value\r\n        } as const;\r\n    }\r\n}\r\n\r\n\r\nexport default dialogsReducer;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"news_dialogs__1Dv6-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"selectedPage\":\"Paginator_selectedPage__3HUGP\"};","module.exports = __webpack_public_path__ + \"static/media/oval.9e9dc538.svg\";","import React from 'react';\r\nimport  style from './news.module.css';\r\n\r\nconst News = () => {\r\n    return (\r\n        <div className={style.music}>\r\n            News\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default  News;","import React from 'react';\r\nimport  style from './music.module.css';\r\n\r\nconst Music = () => {\r\n    return (\r\n        <div className={style.music}>\r\n            Music\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default  Music;","import React from 'react';\r\nimport  style from './settings.module.css';\r\n\r\nconst Settings = () => {\r\n    return (\r\n        <div className={style.settings}>\r\n            Settings\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default  Settings;","import React from \"react\";\r\nimport style from \"./Paginator.module.css\";\r\n\r\ntype PaginatorPropsType = {\r\n    pageSize: number;\r\n    totalItemsCount: number;\r\n    currentPage: number;\r\n    changedPage: (pageNumber: number) => void;\r\n    portionSize: number;\r\n    portionNumber: number;\r\n    setPortionNumber: (portionNum: number) => void;\r\n}\r\nconst Paginator: React.FC<PaginatorPropsType> = (props) => {\r\n\r\n    let pageCount = Math.ceil(props.totalItemsCount / props.pageSize);\r\n    let pages = [];\r\n    for (let i = 1; i <= pageCount; i++) {\r\n        pages.push(i);\r\n    }\r\n\r\n    const portionCount = Math.ceil(pageCount / props.portionSize);\r\n    // const [portionNumber, setPortionNumber] = useState<number>(1);\r\n    const leftPortionPageNumber = (props.portionNumber - 1) * props.portionSize + 1;\r\n    const rightPortionPageNumber = props.portionNumber * props.portionSize;\r\n\r\n\r\n    return (\r\n        <div>\r\n            {props.portionNumber > 1 && <button onClick={() => {\r\n                props.setPortionNumber(props.portionNumber - 1)\r\n            }}>назад</button>}\r\n            {\r\n                pages\r\n                    .filter(p => p >= leftPortionPageNumber && p <= rightPortionPageNumber)\r\n                    .map(p => <span key={p}\r\n                                    className={props.currentPage === p ? style.selectedPage : ''}\r\n                                    onClick={(e) => {\r\n                                        props.changedPage(p);\r\n                                    }}>{p}\r\n                        </span>)\r\n            }\r\n            {\r\n                portionCount > props.portionNumber &&\r\n\t\t\t\t<button onClick={() => {\r\n                    props.setPortionNumber(props.portionNumber + 1)\r\n                }}>вперед</button>\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Paginator;","import React from \"react\";\r\nimport userPhoto from '../../assets/images/green.png';\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {UserType} from \"../../types/types\";\r\n\r\n\r\nexport type UsersPropsType = {\r\n    user: UserType;\r\n    follow: (userId: string) => void;\r\n    unfollow: (userId: string) => void;\r\n\r\n}\r\nconst User = (props: UsersPropsType) => {\r\n\r\n    const {user, unfollow, follow} = props;\r\n    return (\r\n        <div>\r\n            <div>\r\n                <div>\r\n                    <NavLink to={'/profile/' + user.id}>\r\n                        <img src={user.photos.small !== null ? user.photos.small : userPhoto}\r\n                             alt=\"user-avatar\" width={100} height={100}/>\r\n\r\n                    </NavLink>\r\n                </div>\r\n                {user.followed\r\n                    ? <button onClick={() => {\r\n                        unfollow(user.id)\r\n                    }}>unfollow</button>\r\n                    : <button onClick={() => {\r\n                        follow(user.id)\r\n                    }}>follow</button>}\r\n            </div>\r\n            <div>\r\n                <div>\r\n                    <span>{user.name}</span>\r\n                    <span>{user.status}</span>\r\n                </div>\r\n                <div>\r\n                    <span>{'user.location.country'}</span>\r\n                    <span>{'user.location.city'}</span>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default User;","import {AppRootState} from './redux-store';\r\nimport {createSelector} from 'reselect'\r\n\r\nexport const getIsFetching = (state: AppRootState) => {\r\n    return state.usersPage.isFetching;\r\n}\r\nexport const getUsersSelector = (state: AppRootState) => {\r\n    return state.usersPage.users;\r\n}\r\n// export const getUsersSelectorTest = (state: AppRootState) => {\r\n//     return getUsersSelector(state).filter(user => true);\r\n// }\r\nexport const getUsers = createSelector(getUsersSelector, getIsFetching, (users, isFetching) => {\r\n    return users.filter(user => true);\r\n});\r\n\r\nexport const getPageSize = (state: AppRootState) => {\r\n    return state.usersPage.pageSize;\r\n}\r\nexport const getTotalUsersCount = (state: AppRootState) => {\r\n    return state.usersPage.totalUsersCount;\r\n}\r\nexport const getCurrentPage = (state: AppRootState) => {\r\n    return state.usersPage.currentPage;\r\n}\r\nexport const getFollowingInProgress = (state: AppRootState) => {\r\n    return state.usersPage.followingInProgress;\r\n}\r\nexport const getFilter = (state: AppRootState) => {\r\n    return state.usersPage.filter;\r\n}\r\n","import React from 'react';\r\nimport {Field, Form, Formik} from 'formik'\r\nimport {UsersReducerFilterType} from '../../redux/users-reducer';\r\nimport {useSelector} from 'react-redux';\r\nimport {getFilter} from '../../redux/users-selectors';\r\n\r\nconst usersSearchFormValidate = (values: UsersSearchFormType) => {\r\n    const errors = {};\r\n    return errors;\r\n}\r\ntype UsersSearchFormType = {\r\n    term: string\r\n    friend: null | string\r\n}\r\ntype UsersSearchFormPropsType = {\r\n    changeFilter: (filter: UsersReducerFilterType) => void;\r\n}\r\n\r\nexport const UsersSearchForm: React.FC<UsersSearchFormPropsType> = React.memo((props) => {\r\n    const filter = useSelector(getFilter);\r\n    const submit = (values: UsersSearchFormType, {setSubmitting}: { setSubmitting: (isSubmitting: boolean) => void }) => {\r\n        const filter: UsersReducerFilterType = {\r\n            term: values.term,\r\n            friend: values.friend === 'null' ? null : values.friend === 'true' ? true : false\r\n        }\r\n        props.changeFilter(filter);\r\n        setSubmitting(false);\r\n    }\r\n\r\n    return <div>\r\n        <Formik\r\n            enableReinitialize\r\n            initialValues={{term: filter.term, friend: filter.friend as null | string}}\r\n            validate={usersSearchFormValidate}\r\n            onSubmit={submit}\r\n        >\r\n            {({isSubmitting}) => (\r\n                <Form>\r\n                    <Field type=\"text\" name=\"term\"/>\r\n                    <Field name=\"friend\" as=\"select\">\r\n                        <option value=\"null\">All</option>\r\n                        <option value=\"true\">Only followed</option>\r\n                        <option value=\"false\">Only unfollowed</option>\r\n                    </Field>\r\n                    <button type=\"submit\" disabled={isSubmitting}>\r\n                        Find\r\n                    </button>\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    </div>\r\n})","export const updateObjectInArray = (items:any,itemId:string, itemProps:string, newObjProps:any) => {\r\n    return  items.map((user:any)=> {\r\n    if (user[itemProps] === itemId) {\r\n            return {...user, ...newObjProps}\r\n        }\r\n        return user;\r\n    })\r\n}","import {APIResponseType, instance} from './api';\r\nimport {UserType} from \"../types/types\";\r\n\r\nexport type GetUsersRespType = {\r\n    items: Array<UserType>;\r\n    totalCount: number;\r\n    error: string;\r\n}\r\n\r\nexport const userApi = {\r\n    getUsers(currentPage: number = 1, pageSize: number = 10,term:string = '', friend: null | boolean ) {\r\n        return instance.get<GetUsersRespType>(`users?page=${currentPage}&count=${pageSize}&term=${term}` + (friend === null ? '' : `&friend=${friend}`))\r\n            .then(response => response.data);\r\n    },\r\n    follow(id: string) {\r\n        return instance.post<APIResponseType>(`follow/${id}`, {})\r\n            .then(response => response.data);\r\n    },\r\n    unFollow(id: string) {\r\n        return instance.delete<APIResponseType>(`follow/${id}`)\r\n            .then(response => response.data);\r\n    },\r\n}\r\n","import {AppRootState, InferActionsType} from './redux-store';\r\nimport {ThunkAction, ThunkDispatch} from 'redux-thunk';\r\nimport {AuthReducerType} from './auth-reducer';\r\nimport {dialogsReducerAC} from './dialogs-reducer';\r\nimport {NavbarReducerAC} from './navbar-reducer';\r\nimport {profileReducerType} from './profile-reducer';\r\nimport {AppReducerType} from './app-reducer';\r\nimport {updateObjectInArray} from '../utils/object-helpers';\r\nimport {UserType} from '../types/types';\r\nimport {userApi} from '../api/users-api';\r\nimport {APIResponseType} from '../api/api';\r\n\r\n\r\nexport type UsersReducerAC = InferActionsType<typeof actions>;\r\n\r\nexport type SWActionType =\r\n    AuthReducerType\r\n    | dialogsReducerAC\r\n    | NavbarReducerAC\r\n    | profileReducerType\r\n    | UsersReducerAC\r\n    | AppReducerType;\r\n\r\nlet initialState = {\r\n    users: [] as Array<UserType>,\r\n    pageSize: 10,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isFetching: false,\r\n    followingInProgress: [] as Array<string>,\r\n    filter: {\r\n        term: '',\r\n        friend: null as null | boolean\r\n    }\r\n}\r\n\r\nexport type   UsersReducerInitialStateType = typeof initialState;\r\nexport type   UsersReducerFilterType = typeof initialState.filter;\r\n\r\nconst usersReducer = (state: UsersReducerInitialStateType = initialState, action: UsersReducerAC): UsersReducerInitialStateType => {\r\n    switch (action.type) {\r\n        case 'FOLLOW':\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.userId, 'id', {followed: true})\r\n            }\r\n        case 'UNFOLLOW':\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.userId, 'id', {followed: false})\r\n            }\r\n        case 'SET-USERS' :\r\n            return {\r\n                ...state,\r\n                users: action.users\r\n            }\r\n        case 'SET-CURRENT-PAGE' :\r\n            return {\r\n                ...state,\r\n                currentPage: action.currentPage\r\n            }\r\n        case 'SW/USERS/SET-FILTER':\r\n            return {\r\n                ...state,\r\n                filter: action.payload\r\n            }\r\n        case 'SET-TOTAL-COUNT' :\r\n            return {\r\n                ...state,\r\n                totalUsersCount: action.totalCount\r\n            }\r\n        case 'TOGGLE-IS-FETCHING' :\r\n            return {\r\n                ...state,\r\n                isFetching: action.isFetching\r\n            }\r\n        case 'TOGGLE-FOLLOWING-IN-PROGRESS':\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.isFetching\r\n                    ? [...state.followingInProgress, action.userId]\r\n                    : state.followingInProgress.filter(id => id !== action.userId)\r\n            }\r\n        default :\r\n            return state\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    followSuccess: (userId: string) => {\r\n        return {\r\n            type: 'FOLLOW',\r\n            userId\r\n        } as const;\r\n    },\r\n    unFollowSuccess: (userId: string) => {\r\n        return {\r\n            type: 'UNFOLLOW',\r\n            userId\r\n        } as const;\r\n    },\r\n    setUsers: (users: Array<UserType>) => {\r\n        return {\r\n            type: 'SET-USERS',\r\n            users\r\n        } as const;\r\n    },\r\n    setCurrentPage: (currentPage: number) => {\r\n        return {\r\n            type: 'SET-CURRENT-PAGE',\r\n            currentPage\r\n        } as const;\r\n    },\r\n    setFilter: (filter: UsersReducerFilterType) => {\r\n        return {\r\n            type: 'SW/USERS/SET-FILTER',\r\n            payload: filter\r\n        } as const;\r\n    },\r\n    setUsersTotalCount: (totalCount: number) => {\r\n        return {\r\n            type: 'SET-TOTAL-COUNT',\r\n            totalCount\r\n        } as const;\r\n    },\r\n    toggleIsFetching: (isFetching: boolean) => {\r\n        return {\r\n            type: 'TOGGLE-IS-FETCHING',\r\n            isFetching\r\n        } as const;\r\n    },\r\n    toggleFollowingInProgress: (isFetching: boolean, userId: string) => {\r\n        return {\r\n            type: 'TOGGLE-FOLLOWING-IN-PROGRESS',\r\n            isFetching,\r\n            userId\r\n        } as const;\r\n    }\r\n}\r\n\r\n\r\nexport type ThunkType = ThunkAction<void, AppRootState, unknown, SWActionType>;\r\n\r\nexport const requestUsers = (requestPage: number, pageSize: number, filter: UsersReducerFilterType): ThunkType => {\r\n    return async (dispatch: ThunkDispatch<AppRootState, unknown, SWActionType>) => {\r\n        dispatch(actions.toggleIsFetching(true));\r\n        dispatch(actions.setCurrentPage(requestPage));\r\n        dispatch(actions.setFilter(filter));\r\n\r\n        const data = await userApi.getUsers(requestPage, pageSize, filter.term, filter.friend);\r\n        dispatch(actions.toggleIsFetching(false));\r\n        dispatch(actions.setUsers(data.items));\r\n        dispatch(actions.setUsersTotalCount(data.totalCount));\r\n    }\r\n}\r\nconst followUnfollowFlow = async (dispatch: ThunkDispatch<AppRootState, unknown, SWActionType>, userId: string, apiMethod: (userId: string) => Promise<APIResponseType>, actionCreator: any) => {\r\n\r\n    dispatch(actions.toggleFollowingInProgress(true, userId));\r\n    const data = await apiMethod(userId);\r\n\r\n    if (data.resultCode === 0) {\r\n        dispatch(actionCreator(userId));\r\n    }\r\n    dispatch(actions.toggleFollowingInProgress(false, userId));\r\n}\r\nexport const follow = (userId: string): ThunkType => {\r\n    return async (dispatch: ThunkDispatch<AppRootState, unknown, SWActionType>) => {\r\n        let apiMethod = userApi.follow.bind(userApi);\r\n        await followUnfollowFlow(dispatch, userId, apiMethod, actions.followSuccess);\r\n    }\r\n}\r\nexport const unfollow = (userId: string): ThunkType => {\r\n    return async (dispatch: ThunkDispatch<AppRootState, unknown, SWActionType>) => {\r\n        let apiMethod = userApi.unFollow.bind(userApi);\r\n        await followUnfollowFlow(dispatch, userId, apiMethod, actions.unFollowSuccess);\r\n    }\r\n}\r\n\r\nexport default usersReducer;\r\n","import React, {useEffect, useState} from 'react';\r\nimport Paginator from '../common/Paginator/Paginator';\r\nimport User from './User';\r\nimport {UsersSearchForm} from './UsersSearchForm';\r\nimport {follow, requestUsers, unfollow, UsersReducerFilterType} from '../../redux/users-reducer';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {getCurrentPage, getFilter, getPageSize, getTotalUsersCount, getUsers} from '../../redux/users-selectors';\r\nimport {useHistory} from 'react-router-dom';\r\nimport * as queryString from 'querystring';\r\n\r\ntype QueryParamType = { page?: string, term?: string, friend?: string }\r\n\r\nexport const Users = () => {\r\n    const [portionNumber, setPortionNumber] = useState<number>(1);\r\n    const pageSize = useSelector(getPageSize);\r\n    const totalUsersCount = useSelector(getTotalUsersCount);\r\n    const currentPage = useSelector(getCurrentPage);\r\n    const filter = useSelector(getFilter);\r\n    const users = useSelector(getUsers);\r\n\r\n\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n\r\n\r\n    useEffect(() => {\r\n            const search = history.location.search.substr(1);\r\n            const parsed = queryString.parse(search) as QueryParamType\r\n\r\n            let actualPage = currentPage;\r\n            if (!!parsed.page) actualPage = Number(parsed.page);\r\n\r\n            let actualFilter = filter;\r\n            if (!!parsed.term) actualFilter = {...actualFilter, term: parsed.term}\r\n            switch (parsed.friend) {\r\n                case 'null' :\r\n                    actualFilter = {...actualFilter, friend: null}\r\n                    break;\r\n                case 'true' :\r\n                    actualFilter = {...actualFilter, friend: true}\r\n                    break;\r\n                case 'false' :\r\n                    actualFilter = {...actualFilter, friend: false}\r\n                    break;\r\n            }\r\n            dispatch(requestUsers(actualPage, pageSize, actualFilter));\r\n        }, []\r\n    )\r\n    ;\r\n\r\n    useEffect(() => {\r\n        let query: QueryParamType = {};\r\n        if (!!filter.term) query.term = filter.term;\r\n        if (filter.friend !== null) query.friend = String(filter.friend);\r\n        if (currentPage !== 1) query.page = String(currentPage);\r\n\r\n        history.push({\r\n            pathname: '/users',\r\n            // 1 variant\r\n            // search: `?term=${filter.term}&friend=${filter.friend}&page=${currentPage}`\r\n            //2 variant\r\n            search: queryString.stringify(query)\r\n        })\r\n    }, [filter, currentPage])\r\n\r\n    const changeFilter = (filter: UsersReducerFilterType) => {\r\n        dispatch(requestUsers(1, pageSize, filter));\r\n    }\r\n\r\n    const changedPage = (pageNumber: number) => {\r\n        dispatch(requestUsers(pageNumber, pageSize, filter));\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <UsersSearchForm changeFilter={changeFilter}/>\r\n            <Paginator portionNumber={portionNumber} pageSize={pageSize} totalItemsCount={totalUsersCount}\r\n                       currentPage={currentPage}\r\n                       changedPage={changedPage} portionSize={10} setPortionNumber={setPortionNumber}/>\r\n            {\r\n                users.map(user => {\r\n                    const unFollowHandler = () => {\r\n                        dispatch(unfollow(user.id));\r\n                    }\r\n                    const followHandler = () => {\r\n                        dispatch(follow(user.id));\r\n                    }\r\n                    return (\r\n                        <User user={user} follow={followHandler} unfollow={unFollowHandler} key={user.id}/>\r\n                    );\r\n                })\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n\r\n","import {useSelector} from 'react-redux';\r\nimport {Users} from './UsersClass';\r\n\r\nimport {getIsFetching} from '../../redux/users-selectors';\r\nimport Preloader from '../../assets/preloader/Preloader';\r\nimport React from 'react';\r\n\r\n// type MapStateToPropsType = UsersReducerInitialStateType;\r\n// type MapDispatchToPropsType = {\r\n//     followSuccess: (userId: string) => void;\r\n//     unFollowSuccess: (userId: string) => void;\r\n//     // setUsers: (users: Array<UserType>) => void;\r\n//     setCurrentPage: (currentPage: number) => void;\r\n//     setUsersTotalCount: (totalCount: number) => void;\r\n//     // toggleIsFetching: (isFetching: boolean) => void;\r\n//     toggleFollowingInProgress: (isFetching: boolean, userId: string) => void;\r\n//     getUsers: (currentPage: number, pageSize: number, filter: UsersReducerFilterType) => void;\r\n//     follow: (userId: string) => void;\r\n//     unfollow: (userId: string) => void;\r\n// }\r\n\r\n\r\n//with selectors\r\n// let mapStateToProps = (state: AppRootState): MapStateToPropsType => {\r\n//     return {\r\n//         users: getUsers(state),\r\n//         // pageSize: getPageSize(state),\r\n//         // totalUsersCount: getTotalUsersCount(state),\r\n//         // currentPage: getCurrentPage(state),\r\n//         // isFetching: getIsFetching(state),\r\n//         followingInProgress: getFollowingInProgress(state),\r\n//         // filter: getFilter(state),\r\n//     }\r\n// }\r\n\r\n\r\n// export default connect<MapStateToPropsType, MapDispatchToPropsType, {}, AppRootState>(mapStateToProps, {\r\n//     followSuccess: actions.followSuccess,\r\n//     unFollowSuccess: actions.unFollowSuccess,\r\n//     setCurrentPage: actions.setCurrentPage,\r\n//     setUsersTotalCount: actions.setUsersTotalCount,\r\n//     toggleFollowingInProgress: actions.toggleFollowingInProgress,\r\n//     getUsers: requestUsers,\r\n//     follow,\r\n//     unfollow\r\n// })(UsersAPIComponent);\r\n\r\n\r\nexport const UsersPage: React.FC = () => {\r\n    const isFetching = useSelector(getIsFetching);\r\n    return <>\r\n        {isFetching\r\n            ? <Preloader/>\r\n            : null}\r\n        <Users/>\r\n    </>\r\n}","import {instance, APIResponseType, ResultCodeEnum, ResultCodeForCaptchaEnum} from \"./api\";\r\n\r\ntype LoginRespDataType = {\r\n    userId: number;\r\n}\r\ntype MeRespDataType = {\r\n    id: number\r\n    email: string\r\n    login: string\r\n}\r\nexport const authApi = {\r\n    authMe() {\r\n        return instance.get<APIResponseType<MeRespDataType>>('auth/me').then(res => res.data);\r\n    },\r\n    login(email: string, password: string, rememberMe: boolean, captcha: string | null = null) {\r\n        return instance.post<APIResponseType<LoginRespDataType, ResultCodeEnum | ResultCodeForCaptchaEnum>>('auth/login', {\r\n            email,\r\n            password,\r\n            rememberMe,\r\n            captcha\r\n        })\r\n            .then(res => res.data);\r\n    },\r\n    logout() {\r\n        return instance.delete<APIResponseType>('auth/login')\r\n            .then(res => res.data);\r\n    }\r\n}\r\n","import {instance} from \"./api\";\r\n\r\nexport const securityApi = {\r\n    getCaptcha() {\r\n        return instance.get<{ url: string }>('security/get-captcha-url').then(res => res.data)\r\n    },\r\n}\r\n","import {SWActionType, ThunkType} from \"./users-reducer\";\r\nimport {ResultCodeEnum, ResultCodeForCaptchaEnum} from \"../api/api\";\r\nimport {ThunkDispatch} from \"redux-thunk\";\r\nimport {AppRootState, InferActionsType} from \"./redux-store\";\r\nimport {stopSubmit} from \"redux-form\";\r\nimport {authApi} from \"../api/auth-api\";\r\nimport {securityApi} from \"../api/security-api\";\r\n\r\nconst SET_USER_DATA = 'auth/SET-USER-DATA';\r\nconst SET_AUTH_USER = 'auth/SET-AUTH-USER';\r\nconst GET_CAPTCHA_URL = 'auth/GET-CAPTCHA-URL';\r\n\r\nexport type AuthReducerTypeInitialStateType = {\r\n    id: null | number,\r\n    email: null | string,\r\n    login: null | string,\r\n    isAuth: boolean,\r\n    authUser: AuthUserType | null,\r\n    captchaUrl: string | null\r\n}\r\n\r\nexport type AuthUserType = {\r\n    aboutMe: string,\r\n    contacts: {\r\n        [key: string]: string\r\n    },\r\n    lookingForAJob: boolean,\r\n    lookingForAJobDescription: string,\r\n    fullName: string,\r\n    userId: number,\r\n    photos: {\r\n        small: string,\r\n        large: string\r\n    }\r\n}\r\n\r\nlet initialState = {\r\n    id: null,\r\n    email: null,\r\n    login: null,\r\n    isAuth: false,\r\n    authUser: null,\r\n    captchaUrl: null\r\n}\r\n\r\n\r\nexport type AuthReducerType = InferActionsType<typeof actions>;\r\n\r\n\r\nconst authReducer = (state: AuthReducerTypeInitialStateType = initialState, action: AuthReducerType): AuthReducerTypeInitialStateType => {\r\n    switch (action.type) {\r\n        case SET_USER_DATA:\r\n        case GET_CAPTCHA_URL : {\r\n            return {\r\n                ...state,\r\n                ...action.payload\r\n            }\r\n        }\r\n        case SET_AUTH_USER:\r\n            return {\r\n                ...state,\r\n                authUser: action.authUser\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default authReducer;\r\n\r\n//actions\r\n// export const setAuthUserData = (id: number | null, email: string | null, login: string | null, isAuth: boolean) => {\r\n//     return {\r\n//         type: SET_USER_DATA,\r\n//         payload: {\r\n//             id,\r\n//             email,\r\n//             login,\r\n//             isAuth\r\n//         }\r\n//     } as const;\r\n// }\r\n// export const setAuthUser = (authUser: AuthUserType) => {\r\n//     return {\r\n//         type: SET_AUTH_USER,\r\n//         authUser\r\n//     } as const;\r\n// }\r\n// export const getCaptchaUrl = (captchaUrl: string) => {\r\n//     return {\r\n//         type: GET_CAPTCHA_URL,\r\n//         payload: {captchaUrl}\r\n//     } as const;\r\n// }\r\n// type SetUserDataACType = ReturnType<typeof setAuthUserData>;\r\n// type SetAuthUserACType = ReturnType<typeof setAuthUser>;\r\n// type GetCaptchaUrlACType = ReturnType<typeof getCaptchaUrl>;\r\n// export type AuthReducerType = SetUserDataACType | SetAuthUserACType | GetCaptchaUrlACType;\r\n\r\n\r\nconst actions = {\r\n    setAuthUserData: (id: number | null, email: string | null, login: string | null, isAuth: boolean) => {\r\n        return {\r\n            type: SET_USER_DATA,\r\n            payload: {\r\n                id,\r\n                email,\r\n                login,\r\n                isAuth\r\n            }\r\n        } as const;\r\n    },\r\n    setAuthUser: (authUser: AuthUserType) => {\r\n        return {\r\n            type: SET_AUTH_USER,\r\n            authUser\r\n        } as const;\r\n    },\r\n    getCaptchaUrl: (captchaUrl: string) => {\r\n        return {\r\n            type: GET_CAPTCHA_URL,\r\n            payload: {captchaUrl}\r\n        } as const;\r\n    }\r\n}\r\n//thunk\r\nexport const authMe = (): ThunkType => {\r\n    return async (dispatch: ThunkDispatch<AppRootState, unknown, SWActionType>) => {\r\n        const meData = await authApi.authMe();\r\n\r\n        if (meData.resultCode === ResultCodeEnum.Success) {\r\n            let {id, email, login} = meData.data;\r\n            dispatch(actions.setAuthUserData(id, email, login, true));\r\n            // const userRes = await userApi.getUserProfileById(id);\r\n            // dispatch(setAuthUser(userRes.data));\r\n        }\r\n    }\r\n}\r\nexport const login = (email: string, password: string, rememberMe: boolean, captcha: string | null): ThunkType => {\r\n    return async (dispatch: ThunkDispatch<AppRootState, unknown, SWActionType | ReturnType<typeof stopSubmit >>) => {\r\n        const data = await authApi.login(email, password, rememberMe, captcha);\r\n\r\n        if (data.resultCode === ResultCodeEnum.Success) {\r\n            dispatch(authMe());\r\n        } else {\r\n            if (data.resultCode === ResultCodeForCaptchaEnum.CaptchaIsRequired) {\r\n                dispatch(getCaptcha());\r\n            }\r\n            const message = data.messages.length > 0 ? data.messages[0] : 'some error occurred';\r\n            dispatch(stopSubmit('login', {_error: message}));\r\n        }\r\n\r\n    }\r\n}\r\nexport const logout = (): ThunkType => {\r\n    return async (dispatch: ThunkDispatch<AppRootState, unknown, SWActionType>) => {\r\n        const data = await authApi.logout();\r\n\r\n        if (data.resultCode === ResultCodeEnum.Success) {\r\n            dispatch(actions.setAuthUserData(null, null, null, false));\r\n        }\r\n    }\r\n}\r\n\r\nexport const getCaptcha = (): ThunkType => {\r\n    return async (dispatch: ThunkDispatch<AppRootState, unknown, SWActionType>) => {\r\n        try {\r\n            const res = await securityApi.getCaptcha();\r\n            dispatch(actions.getCaptchaUrl(res.url));\r\n        } catch (e) {\r\n            console.log(e.name)\r\n        }\r\n    }\r\n}\r\n","import React from 'react';\r\nimport {Field, InjectedFormProps, reduxForm} from 'redux-form';\r\nimport {Input} from '../common/formsControls/FormsControls';\r\nimport {required} from '../../utils/validators/validators';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {login} from '../../redux/auth-reducer';\r\nimport {AppRootState} from '../../redux/redux-store';\r\nimport {Redirect} from 'react-router-dom';\r\n// import styles from './../common/formsControls/FormsControls.module.css';\r\nimport styles from './Login.module.css'\r\n\r\nexport type FormDataType = {\r\n    login: string;\r\n    password: string;\r\n    checkbox: boolean;\r\n    captcha: string | null;\r\n}\r\ntype LoginFormPropsType = {\r\n    captchaUrl: string | null;\r\n}\r\nexport const LoginForm: React.FC<LoginFormPropsType & InjectedFormProps<FormDataType, LoginFormPropsType>> = (props) => {\r\n    const {handleSubmit, error, captchaUrl} = props;\r\n    return <form onSubmit={handleSubmit} className={styles.loginForm}>\r\n        <div className={styles.userBox}>\r\n            <Field name={'login'} placeholder={'Login'} component={Input}\r\n                   validate={[required]}\r\n            />\r\n        </div>\r\n        <div className={styles.userBox}>\r\n            <Field name={'password'} placeholder={'Password'} type={'password'} component={Input}\r\n                   validate={[required]}/>\r\n        </div>\r\n        <div className={styles.checkBox}>\r\n            <Field name={'checkbox'} type=\"checkbox\" component={Input} id={'checkbox'}/>\r\n            <label htmlFor=\"checkbox\">Remember me</label>\r\n        </div>\r\n        {captchaUrl && <img src={captchaUrl} alt=\"captcha\"/>}\r\n        {captchaUrl &&\r\n        <div className={styles.userBox}>\r\n            <Field name={'captcha'} placeholder={'captcha'} component={Input}\r\n                   validate={[required]}\r\n            />\r\n        </div>\r\n        }\r\n\r\n        {error && <div className={styles.commonErrorField}>\r\n            {error}\r\n        </div>}\r\n        <div>\r\n            <button type={'submit'} className={styles.btn}>\r\n                <span></span>\r\n                <span></span>\r\n                <span></span>\r\n                <span></span>\r\n                Login\r\n            </button>\r\n            {/*<Button type={'primary'} htmlType=\"submit\" className={`${styles.btn} ${styles.btnPrimary} ${styles.ghost}`}>Login</Button>*/}\r\n        </div>\r\n    </form>\r\n}\r\n\r\nconst LoginReduxForm = reduxForm<FormDataType, LoginFormPropsType>({form: 'login'})(LoginForm);\r\n\r\n\r\nexport const LoginPage = () => {\r\n    const isAuth = useSelector<AppRootState, boolean>(state => state.auth.isAuth);\r\n    const captchaUrl = useSelector<AppRootState, string | null>(state => state.auth.captchaUrl);\r\n    const dispatch = useDispatch();\r\n\r\n    if (isAuth) {\r\n        return <Redirect to={'/profile'}/>\r\n    }\r\n    const onSubmit = (formData: FormDataType) => {\r\n        dispatch(login(formData.login, formData.password, formData.checkbox, formData.captcha));\r\n    }\r\n    return <div className={styles.loginBox}>\r\n        <h2>Login</h2>\r\n        <LoginReduxForm onSubmit={onSubmit} captchaUrl={captchaUrl}\r\n                        initialValues={{login: 'free@samuraijs.com', password: 'free'}}/>\r\n    </div>\r\n\r\n}\r\n","import {UserType} from \"../types/types\";\r\n\r\nconst SET_USERS = 'SW/FRIENDS/SET-USERS';\r\nconst SET_STATUS = 'SW/FRIENDS/SET-STATUS';\r\n\r\nexport const statuses = {\r\n    NOT_INITIALIZED: 'NOT_INITIALIZED',\r\n    ERROR: 'ERROR',\r\n    INPROGRESS: 'INPROGRESS',\r\n    SUCCESS: 'SUCCESS'\r\n}\r\n\r\nexport type NavbarReducerInitialState = {\r\n    users: Array<UserType>;\r\n    status: string;\r\n}\r\n\r\nlet initialState: NavbarReducerInitialState = {\r\n    users: [],\r\n    status: statuses.NOT_INITIALIZED,\r\n}\r\n\r\ntype setStatusFriendsACType = {\r\n    type: typeof SET_STATUS,\r\n    status: string;\r\n}\r\ntype setUsersFriendsACType = {\r\n    type: typeof SET_USERS,\r\n    users: Array<UserType>;\r\n}\r\n\r\nexport type NavbarReducerAC = setStatusFriendsACType | setUsersFriendsACType;\r\n\r\nconst navbarReducer = (state: NavbarReducerInitialState = initialState, action: NavbarReducerAC): NavbarReducerInitialState => {\r\n\r\n    switch (action.type) {\r\n        case SET_STATUS :\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            }\r\n        case SET_USERS: {\r\n            return {\r\n                ...state,\r\n                users: [...state.users, ...action.users]\r\n            }\r\n        }\r\n        default :\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\nexport const setStatusFriends = (status: string): setStatusFriendsACType => {\r\n    return {\r\n        type: SET_STATUS,\r\n        status\r\n    }\r\n}\r\nexport const setUsersFriends = (users: Array<UserType>): setUsersFriendsACType => {\r\n    return {\r\n        type: SET_USERS,\r\n        users\r\n    }\r\n}\r\n\r\nexport default navbarReducer;","import {SWActionType, ThunkType} from \"./users-reducer\";\r\nimport {ThunkDispatch} from \"redux-thunk\";\r\nimport {AppRootState, InferActionsType} from \"./redux-store\";\r\nimport {authMe} from \"./auth-reducer\";\r\n\r\nexport type AppReducerTypeInitialStateType = typeof initialState;\r\n\r\nconst INITIALIZED_SUCCESS = 'APP/SET_INITIALIZED';\r\n\r\nlet initialState = {\r\n    initialized: false\r\n}\r\n\r\n\r\nexport type AppReducerType = InferActionsType<typeof actions>;\r\n\r\nexport const appReducer = (state: AppReducerTypeInitialStateType = initialState, action: AppReducerType): AppReducerTypeInitialStateType => {\r\n    switch (action.type) {\r\n        case INITIALIZED_SUCCESS :\r\n            return {\r\n                ...state,\r\n                initialized: true\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n//old\r\n// export const initializedSuccess = () => {\r\n//     return {\r\n//         type: INITIALIZED_SUCCESS,\r\n//     } as const;\r\n// }\r\n\r\n// export type AppReducerType = ReturnType<typeof initializedSuccess>;\r\n\r\nconst actions = {\r\n    initializedSuccess: () => ({type: INITIALIZED_SUCCESS,} as const)\r\n}\r\n\r\n\r\nexport const initializeApp = (): ThunkType => {\r\n    return (dispatch: ThunkDispatch<AppRootState, unknown, SWActionType>) => {\r\n        let promise = dispatch(authMe());\r\n        Promise.all([promise])\r\n            .then(() => {\r\n                dispatch(actions.initializedSuccess());\r\n            }).catch(() => {\r\n            dispatch(actions.initializedSuccess());\r\n        })\r\n    }\r\n}\r\n","import {applyMiddleware, combineReducers, compose, createStore} from 'redux';\r\nimport profileReducer from './profile-reducer';\r\nimport dialogsReducer from './dialogs-reducer';\r\nimport navbarReducer from './navbar-reducer';\r\nimport usersReducer from './users-reducer';\r\nimport authReducer from './auth-reducer';\r\nimport {reducer as formReducer} from 'redux-form'\r\n// import thunk as thunkMiddleware from 'redux-thunk';\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport {appReducer} from './app-reducer';\r\n\r\nexport type MessagesType = {\r\n    id: string,\r\n    message: string\r\n}\r\n\r\n\r\nlet reducers = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogsPage: dialogsReducer,\r\n    sidebar: navbarReducer,\r\n    usersPage: usersReducer,\r\n    auth: authReducer,\r\n    form: formReducer,\r\n    app: appReducer\r\n});\r\n\r\n// @ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(reducers, /* preloadedState, */ composeEnhancers(applyMiddleware(thunkMiddleware)));\r\n\r\n//1 way\r\n// type PropertiesType<T> = T extends { [key: string]: infer U } ? U : never ;\r\n// export type InferActionsType<T extends { [key: string]: (...args: any[]) => any }> = ReturnType<PropertiesType<T>>;\r\n\r\n//2 way\r\nexport type InferActionsType<T> = T extends { [keys: string]: (...args: any[]) => infer U } ? U : never;\r\n\r\n\r\nexport type AppRootState = ReturnType<typeof reducers>;\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\n\r\nexport default store;\r\n","import {AppRootState} from \"./redux-store\";\r\n\r\nexport const getIsAuth = (state: AppRootState) => {\r\n    return state.auth.isAuth;\r\n}\r\nexport const getLogin = (state: AppRootState) => {\r\n    return state.auth.login;\r\n}\r\nexport const getAuthUser = (state: AppRootState) => {\r\n    return state.auth.authUser;\r\n}\r\n\r\n","import React from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\nimport {logout} from '../../redux/auth-reducer';\r\nimport userPhotos from '../../assets/images/green.png'\r\n\r\nimport {Avatar, Button, Col, Layout, Menu, Row} from 'antd';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {getIsAuth} from '../../redux/auth-selectors';\r\nimport {AppRootState} from '../../redux/redux-store';\r\n\r\n\r\ntype PropsType = {}\r\nexport const Header = (props: PropsType) => {\r\n    const {Header} = Layout;\r\n\r\n    const isAuth = useSelector(getIsAuth);\r\n    // const login = useSelector(getLogin);\r\n    // const authUser = useSelector(getAuthUser);\r\n\r\n    const userPhoto = useSelector<AppRootState, any>(state => state.profilePage.profile?.photos.small);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const onLogout = () => {\r\n        dispatch(logout());\r\n    }\r\n\r\n\r\n    return <Header className=\"header\">\r\n        <div className=\"logo\"/>\r\n        <Row>\r\n            <Col span={18}>\r\n                <Menu theme=\"dark\" mode=\"horizontal\" defaultSelectedKeys={['2']}>\r\n                    <Menu.Item key=\"1\"><NavLink to='/users'>Users</NavLink></Menu.Item>\r\n                </Menu>\r\n            </Col>\r\n            {\r\n                isAuth ? <>\r\n                        <Col span={1}>\r\n                            {\r\n                                userPhoto ? <Avatar src={userPhoto}/> : <Avatar src={userPhotos}/>\r\n                            }\r\n                        </Col>\r\n                        <Col span={5}>\r\n                            <Button onClick={onLogout}>logOut</Button>\r\n                        </Col>\r\n                    </>\r\n                    :\r\n                    <Col span={6}>\r\n                        <Button>\r\n                            <NavLink to={'/login'}>login</NavLink>\r\n                        </Button>\r\n                    </Col>\r\n            }\r\n        </Row>\r\n    </Header>\r\n\r\n\r\n    // <header className={styles.header}>\r\n    //     <img src=\"https://i.pinimg.com/originals/33/b8/69/33b869f90619e81763dbf1fccc896d8d.jpg\" alt=\"logo\"/>\r\n    //     <div className={styles.loginBlock}>\r\n    //         {\r\n\r\n    //     props.isAuth ? <div className={styles.imgBlock}>\r\n    //             <img\r\n    //                 src={props.authUser ? 'https://i03.fotocdn.net/s121/f5452ede0f497c83/user_l/2769409821.jpg' : \"\"}\r\n    //                 alt={'logo'}/>\r\n    //             <button onClick={props.logout} className={styles.logout}>logOut</button>\r\n    //         </div>\r\n    //         : <NavLink to={'/login'}>\r\n    //             login\r\n    //         </NavLink>\r\n    // }\r\n    //     </div>\r\n    // </header>\r\n\r\n}\r\n\r\nexport default Header;","import React, {Suspense} from 'react';\r\nimport './App.css';\r\nimport News from './components/news/news';\r\nimport Music from './components/music/music';\r\nimport Settings from './components/settings/settings';\r\n\r\nimport {HashRouter, NavLink, Redirect, Route, RouteComponentProps, Switch, withRouter} from 'react-router-dom';\r\nimport {UsersPage} from './components/users/UsersContainer';\r\nimport {LoginPage} from './components/login/Login';\r\nimport {connect, Provider} from 'react-redux';\r\nimport store, {AppRootState} from './redux/redux-store';\r\nimport {compose} from 'redux';\r\nimport {initializeApp} from './redux/app-reducer';\r\nimport Preloader from './assets/preloader/Preloader';\r\n\r\n//And Design\r\nimport 'antd/dist/antd.css';\r\nimport {Layout, Menu} from 'antd';\r\nimport {LaptopOutlined, NotificationOutlined, UserOutlined} from '@ant-design/icons';\r\nimport Header from './components/header/header';\r\n\r\n\r\nconst {SubMenu} = Menu;\r\nconst {Content, Footer, Sider} = Layout;\r\n\r\nconst DialogsContainer = React.lazy(() => import('./components/dialogs/dialogsContainer'));\r\nconst ProfileContainer = React.lazy(() => import('./components/profile/profileContainer'));\r\nconst ChatPagesContainer = React.lazy(() => import('./pages/chat/ChatPages'));\r\n\r\n\r\ntype OwnPropsType = MapDispatchToProps & MapStatePropsType;\r\ntype PropsType = RouteComponentProps & OwnPropsType;\r\n\r\nclass App extends React.Component<PropsType> {\r\n\r\n    catchAllUnhandledErrors = (e: PromiseRejectionEvent) => {\r\n        alert(e.reason);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.initializeApp();\r\n        window.addEventListener('unhandledrejection', this.catchAllUnhandledErrors);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener('unhandledrejection', this.catchAllUnhandledErrors);\r\n    }\r\n\r\n    render() {\r\n        if (!this.props.initialized) {\r\n            return <Preloader/>\r\n        }\r\n        const {match, location, history} = this.props\r\n\r\n\r\n        return (\r\n            <Layout>\r\n                <Header/>\r\n                <Content style={{padding: '0 50px'}}>\r\n                    {/*<Breadcrumb style={{margin: '16px 0'}}>*/}\r\n                    {/*    <Breadcrumb.Item>Home</Breadcrumb.Item>*/}\r\n                    {/*    <Breadcrumb.Item>List</Breadcrumb.Item>*/}\r\n                    {/*    <Breadcrumb.Item>App</Breadcrumb.Item>*/}\r\n                    {/*</Breadcrumb>*/}\r\n                    <Layout className=\"site-layout-background\" style={{padding: '24px 0'}}>\r\n                        <Sider className=\"site-layout-background\" width={200}>\r\n                            {/*<FriendsContainer />*/}\r\n                            <Menu\r\n                                mode=\"inline\"\r\n                                defaultSelectedKeys={['1']}\r\n                                defaultOpenKeys={['sub1']}\r\n                                style={{height: '100%'}}\r\n                                // theme=\"dark\"\r\n                                selectedKeys={[location.pathname]}\r\n                            >\r\n                                <SubMenu key=\"sub1\" icon={<UserOutlined/>} title=\"My Profile\">\r\n                                    <Menu.Item key=\"/profile\"> <NavLink to='/profile'>Profile</NavLink></Menu.Item>\r\n                                    <Menu.Item key=\"/dialogs\"> <NavLink to='/dialogs'>Messages</NavLink></Menu.Item>\r\n                                </SubMenu>\r\n                                <SubMenu key=\"sub2\" icon={<LaptopOutlined/>} title=\"News\">\r\n                                    <Menu.Item key=\"/news\"> <NavLink to='/news'>News</NavLink></Menu.Item>\r\n                                </SubMenu>\r\n                                <SubMenu key=\"sub3\" icon={<NotificationOutlined/>} title=\"Music\">\r\n                                    <Menu.Item key=\"/music\"> <NavLink to='/music'>Music</NavLink></Menu.Item>\r\n                                </SubMenu>\r\n                                <SubMenu key=\"sub4\" icon={<NotificationOutlined/>} title=\"Users\">\r\n                                    <Menu.Item key=\"/users\"> <NavLink to='/users'>Users</NavLink></Menu.Item>\r\n                                    <Menu.Item key=\"/chat\"> <NavLink to='/chat'>Chat</NavLink></Menu.Item>\r\n                                </SubMenu>\r\n                            </Menu>\r\n                            {/*<FriendsContainer />*/}\r\n                        </Sider>\r\n                        <Content style={{padding: '0 24px', minHeight: 280}}>\r\n                            <Suspense fallback={<Preloader/>}>\r\n                                <Switch>\r\n                                    <Route exact path={'/'}><Redirect to={'/profile'}/></Route>\r\n                                    <Route path={'/profile/:userId?'} render={() => <ProfileContainer/>}/>\r\n                                    <Route path={'/dialogs'} render={() => <DialogsContainer/>}/>\r\n                                    <Route path={'/music'} render={() => <Music/>}/>\r\n                                    <Route path={'/news'} component={News}/>\r\n                                    <Route path={'/settings'} component={Settings}/>\r\n                                    <Route path={'/users'} render={() => <UsersPage/>}/>\r\n                                    <Route path={'/login'} render={() => <LoginPage/>}/>\r\n                                    <Route path={'/chat'} render={() => <ChatPagesContainer/>}/>\r\n                                    <Route path={'*'} render={() => <div>404 - NOT FOUND </div>}/>\r\n                                </Switch>\r\n                            </Suspense>\r\n                        </Content>\r\n                    </Layout>\r\n                </Content>\r\n                <Footer style={{textAlign: 'center'}}> Social network ©2020</Footer>\r\n            </Layout>\r\n            //old\r\n            // <div className='app-wrapper'>\r\n            //     <HeaderContainer/>\r\n            //     <Navbar/>\r\n            //     <div className='app-wrapper-content'>\r\n            //         <Suspense fallback={<Preloader/>}>\r\n            //             <Switch>\r\n            //                 <Route exact path={'/'}><Redirect to={'/profile'}/></Route>\r\n            //                 <Route path={'/profile/:userId?'} render={() => <ProfileContainer/>}/>\r\n            //                 <Route path={'/dialogs'} render={() => <DialogsContainer/>}/>\r\n            //                 <Route path={'/music'} render={() => <Music/>}/>\r\n            //                 <Route path={'/news'} component={News}/>\r\n            //                 <Route path={'/settings'} component={Settings}/>\r\n            //                 <Route path={'/users'} render={() => <UsersContainer/>}/>\r\n            //                 <Route path={'/login'} render={() => <Login/>}/>\r\n            //                 <Route path={'*'} render={() => <div>404 - NOT FOUND </div>}/>\r\n            //             </Switch>\r\n            //         </Suspense>\r\n            //     </div>\r\n            // </div>\r\n        );\r\n    }\r\n}\r\n\r\ntype MapDispatchToProps = {\r\n    initializeApp: () => void;\r\n}\r\ntype MapStatePropsType = {\r\n    initialized: boolean\r\n}\r\nconst mapStateToProps = (state: AppRootState): MapStatePropsType => {\r\n    return {\r\n        initialized: state.app.initialized\r\n    }\r\n}\r\n\r\nconst AppContainer = compose<React.ComponentType>(\r\n    withRouter,\r\n    connect<MapStatePropsType, MapDispatchToProps, {}, AppRootState>(mapStateToProps, {\r\n            initializeApp\r\n        }\r\n    ))(App);\r\n\r\nconst SamuraiApp = () => {\r\n    return <Provider store={store}>\r\n        <HashRouter\r\n            // basename={process.env.PUBLIC_URL}\r\n        >\r\n            <AppContainer/>\r\n        </HashRouter>\r\n    </Provider>\r\n}\r\n\r\nexport default SamuraiApp;\r\n\r\n\r\n\r\n\r\n\r\n","import ReactDOM from \"react-dom\";\r\nimport React from \"react\";\r\nimport SamuraiApp from \"./App\";\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <SamuraiApp/>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loginBox\":\"Login_loginBox__3F0Mn\",\"userBox\":\"Login_userBox__3SXUl\",\"btn\":\"Login_btn__1BAmc\",\"btn-anim1\":\"Login_btn-anim1__ZrEqH\",\"btn-anim2\":\"Login_btn-anim2__12WPe\",\"btn-anim3\":\"Login_btn-anim3__2MxfW\",\"btn-anim4\":\"Login_btn-anim4__2A61F\",\"checkBox\":\"Login_checkBox__2aVIs\",\"commonErrorField\":\"Login_commonErrorField__3CHwF\"};","import React from \"react\";\r\nimport styles from \"./FormsControls.module.css\";\r\nimport {WrappedFieldMetaProps} from \"redux-form\";\r\ntype ElementParamsType = {\r\n    meta:WrappedFieldMetaProps\r\n}\r\n// type ElemControlType = (params:ElementParamsType) => React.ReactNode\r\n\r\nexport const Element= (Element: any):React.FC<ElementParamsType>  => ({input, meta, ...props}: any) => {\r\n    const hasError = meta.touched && meta.error;\r\n    return (\r\n        <div className={`${styles.formControl} ${hasError ? styles.error : ''}`}>\r\n            <div>\r\n                <Element {...input} {...props}/>\r\n            </div>\r\n            {hasError && <span>{meta.error}</span>}\r\n        </div>\r\n    )\r\n}\r\nexport const Textarea = Element('textarea');\r\nexport const Input = Element('input');\r\n\r\n// export const Textarea = ({input, meta, ...props}: any) => {\r\n//     const hasError = meta.touched && meta.error;\r\n//     return (\r\n//         <div className={`${styles.formControl} ${hasError ? styles.error : ''}`}>\r\n//             <div>\r\n//                 <textarea {...input} {...props}/>\r\n//             </div>\r\n//             {hasError && <span>{meta.error}</span>}\r\n//         </div>\r\n//     )\r\n// }\r\n// export const Input = ({input, meta, ...props}: any) => {\r\n//     const hasError = meta.touched && meta.error;\r\n//     return (\r\n//         <div className={`${styles.formControl} ${hasError ? styles.error : ''}`}>\r\n//             <div>\r\n//                 <input {...input} {...props}/>\r\n//             </div>\r\n//             {hasError && <span>{meta.error}</span>}\r\n//         </div>\r\n//     )\r\n// }\r\n","import preloader from \"../preloader/svg-loaders/oval.svg\";\r\nimport React from \"react\";\r\n\r\nconst Preloader = () => {\r\n    return (\r\n        <img src={preloader} alt=\"preloader\" style={ { margin:'300px 300px',} }/>\r\n    );\r\n}\r\n\r\nexport default Preloader;"],"sourceRoot":""}