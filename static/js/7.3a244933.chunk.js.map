{"version":3,"sources":["pages/chat/ChatPages.tsx"],"names":["Chat","useState","wsChannel","setWsChannel","useEffect","ws","closeHandler","console","log","setTimeout","createChannel","removeEventListener","close","WebSocket","addEventListener","Messages","AddMessForm","value","setValue","readyState","setReadyState","openHandler","onChange","e","currentTarget","onClick","send","disabled","messages","setMessages","messagesEndRef","useRef","current","scrollIntoView","behavior","scrollToBottom","messageHandler","JSON","parse","data","newMess","prevMess","style","height","overflowY","map","m","i","Message","key","message","ref","src","photo","alt","userName","ChatPages"],"mappings":"4JAcMA,EAAiB,WAAO,IAAD,EACSC,mBAA2B,MADpC,mBAClBC,EADkB,KACPC,EADO,KA+BzB,OA5BAC,qBAAU,WAEN,IAAIC,EAEEC,EAAe,WACjBC,QAAQC,IAAI,8DACZC,YAAW,WACPC,MACD,MAEDA,EAAgB,WAAO,IAAD,MAEtB,QAAF,EAAAL,SAAA,SAAIM,oBAAoB,QAASL,GAC/B,QAAF,EAAAD,SAAA,SAAIO,QAEJP,EAAK,IAAIQ,UAAU,gEACnBV,EAAaE,GACX,QAAF,EAAAA,SAAA,SAAIS,iBAAiB,QAASR,IAIlC,OAFAI,IAEO,WACHL,EAAGM,oBAAoB,QAASL,GAChCD,EAAGO,WAER,IAGI,6BACH,kBAACG,EAAD,CAAUb,UAAWA,IACrB,kBAACc,EAAD,CAAad,UAAWA,MAI1Bc,EAAyD,SAAC,GAAiB,IAAhBd,EAAe,EAAfA,UAAe,EAClDD,mBAAiB,IADiC,mBACrEgB,EADqE,KAC9DC,EAD8D,OAExCjB,mBAA6B,WAFW,mBAErEkB,EAFqE,KAEzDC,EAFyD,KAI5EhB,qBAAU,WACN,IAAMiB,EAAc,WAChBD,EAAc,SAIlB,OADS,OAATlB,QAAS,IAATA,KAAWY,iBAAiB,OAAQO,GAC7B,WACM,OAATnB,QAAS,IAATA,KAAWS,oBAAoB,QAASU,MAE7C,CAACnB,IAQJ,OAAO,6BACH,6BACI,8BAAUe,MAAOA,EAAOK,SAAU,SAAAC,GAAC,OAAIL,EAASK,EAAEC,cAAcP,WAEpE,6BACI,4BAAQQ,QAXC,WACRR,IACI,OAATf,QAAS,IAATA,KAAWwB,KAAKT,GAChBC,EAAS,MAQsBS,SAAwB,OAAdzB,GAAqC,SAAfiB,GAA3D,WAKNJ,EAAsD,SAAC,GAAiB,IAAhBb,EAAe,EAAfA,UAAe,EACzCD,mBAA0B,IADe,mBAClE2B,EADkE,KACxDC,EADwD,KAMnEC,EAAiBC,iBAAuB,MAI9C3B,qBAAU,YAHa,WAAO,IAAD,EACzB,UAAA0B,EAAeE,eAAf,SAAwBC,eAAe,CAACC,SAAU,WAGlDC,KACD,CAACP,IAOJ,IAAMQ,EAAiB,SAACb,GACpBhB,QAAQC,IAAI6B,KAAKC,MAAMf,EAAEgB,OACzB,IAAIC,EAAUH,KAAKC,MAAMf,EAAEgB,MAC3BV,GAAY,SAACY,GAAD,4BAAkBA,GAAlB,YAA+BD,QAW/C,OARApC,qBAAU,WAEN,OADS,OAATF,QAAS,IAATA,KAAWY,iBAAiB,UAAWsB,GAChC,WACM,OAATlC,QAAS,IAATA,KAAWS,oBAAoB,UAAWyB,GACjC,OAATlC,QAAS,IAATA,KAAWU,WAEhB,CAACV,IAEG,yBAAKwC,MAAO,CAACC,OAAQ,QAASC,UAAW,WAC3ChB,EAASiB,KAAI,SAACC,EAAGC,GAAJ,OAAU,kBAACC,EAAD,CAASC,IAAKF,EAAGG,QAASJ,OAClD,yBAAKK,IAAKrB,MAOZkB,EAAsC,SAAC,GAAe,IAAdE,EAAa,EAAbA,QAC1C,OAAO,6BACH,yBAAKE,IAAKF,EAAQG,MAAOC,IAAI,SAD1B,IACmC,2BAAIJ,EAAQK,UAClD,6BACCL,EAAQA,QACT,+BAKOM,UA9HG,WACd,OAAO,6BACH,kBAACxD,EAAD","file":"static/js/7.3a244933.chunk.js","sourcesContent":["import React, {useEffect, useRef, useState} from 'react';\r\n\r\ntype WSMessageType = {\r\n    message: string\r\n    photo: string\r\n    userId: number\r\n    userName: string\r\n}\r\nconst ChatPages = () => {\r\n    return <div>\r\n        <Chat/>\r\n    </div>\r\n}\r\n\r\nconst Chat: React.FC = () => {\r\n    const [wsChannel, setWsChannel] = useState<WebSocket | null>(null);\r\n\r\n    useEffect(() => {\r\n\r\n        let ws: WebSocket;\r\n\r\n        const closeHandler = () => {\r\n            console.log('Socket is closed. Reconnect will be attempted in 3 second.');\r\n            setTimeout(() => {\r\n                createChannel();\r\n            }, 3000)\r\n        }\r\n        const createChannel = () => {\r\n\r\n            ws?.removeEventListener('close', closeHandler);\r\n            ws?.close();\r\n\r\n            ws = new WebSocket('wss://social-network.samuraijs.com/handlers/ChatHandler.ashx')\r\n            setWsChannel(ws);\r\n            ws?.addEventListener('close', closeHandler);\r\n        }\r\n        createChannel();\r\n\r\n        return () => {\r\n            ws.removeEventListener('close', closeHandler);\r\n            ws.close();\r\n        }\r\n    }, [])\r\n\r\n\r\n    return <div>\r\n        <Messages wsChannel={wsChannel}/>\r\n        <AddMessForm wsChannel={wsChannel}/>\r\n    </div>\r\n}\r\n\r\nconst AddMessForm: React.FC<{ wsChannel: WebSocket | null }> = ({wsChannel}) => {\r\n    const [value, setValue] = useState<string>('');\r\n    const [readyState, setReadyState] = useState<'pending' | 'open'>('pending');\r\n\r\n    useEffect(() => {\r\n        const openHandler = () => {\r\n            setReadyState('open');\r\n        }\r\n\r\n        wsChannel?.addEventListener('open', openHandler)\r\n        return () => {\r\n            wsChannel?.removeEventListener('close', openHandler);\r\n        }\r\n    }, [wsChannel]);\r\n\r\n    const sendMess = () => {\r\n        if (!value) return;\r\n        wsChannel?.send(value);\r\n        setValue('');\r\n    }\r\n\r\n    return <div>\r\n        <div>\r\n            <textarea value={value} onChange={e => setValue(e.currentTarget.value)}></textarea>\r\n        </div>\r\n        <div>\r\n            <button onClick={sendMess} disabled={wsChannel === null || readyState !== 'open'}>Send</button>\r\n        </div>\r\n    </div>\r\n}\r\n\r\nconst Messages: React.FC<{ wsChannel: WebSocket | null }> = ({wsChannel}) => {\r\n    const [messages, setMessages] = useState<WSMessageType[]>([]);\r\n    /**\r\n     *  Scroll to bottom\r\n     */\r\n        //ref for auto scroll to bottom\r\n    const messagesEndRef = useRef<HTMLDivElement>(null);\r\n    const scrollToBottom = () => {\r\n        messagesEndRef.current?.scrollIntoView({behavior: 'smooth'})\r\n    }\r\n    useEffect(() => {\r\n        scrollToBottom();\r\n    }, [messages]);\r\n\r\n    /**\r\n     * Get messages from WS\r\n     * Set Messages to useState\r\n     * @param e\r\n     */\r\n    const messageHandler = (e: MessageEvent) => {\r\n        console.log(JSON.parse(e.data));\r\n        let newMess = JSON.parse(e.data);\r\n        setMessages((prevMess) => [...prevMess, ...newMess]);\r\n    }\r\n\r\n    useEffect(() => {\r\n        wsChannel?.addEventListener('message', messageHandler)\r\n        return () => {\r\n            wsChannel?.removeEventListener('message', messageHandler)\r\n            wsChannel?.close();\r\n        }\r\n    }, [wsChannel])\r\n\r\n    return <div style={{height: '400px', overflowY: 'scroll'}}>\r\n        {messages.map((m, i) => <Message key={i} message={m}/>)}\r\n        <div ref={messagesEndRef}/>\r\n    </div>\r\n}\r\n\r\ntype MessagePropsType = {\r\n    message: WSMessageType\r\n}\r\nconst Message: React.FC<MessagePropsType> = ({message}) => {\r\n    return <div>\r\n        <img src={message.photo} alt=\"mess\"/> <b>{message.userName}</b>\r\n        <br/>\r\n        {message.message}\r\n        <hr/>\r\n    </div>\r\n}\r\n\r\n\r\nexport default ChatPages;"],"sourceRoot":""}